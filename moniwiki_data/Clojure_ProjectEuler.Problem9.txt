{{{:A Pythagorean triplet is a set of three natural numbers, a  b  c, for which,

a2 + b2 = c2
For example, 32 + 42 = 9 + 16 = 25 = 52.

There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.}}}

김명관&최학윤
{{{#!gcode scheme
(ns Problem9
  (:use clojure.contrib.combinatorics))

(defn makeTriple
  [pair]
  [(first pair) 
   (second pair) 
   (- 1000 (+ (second pair) (first pair)))])

(defn pythagorean?
  [triple]
  (= (+ (* (first triple) (first triple))
       (* (second triple) (second triple))) 
    (* (last triple) (last triple))))

(defn validOrder?
  [pair]
  (< (first pair) (second pair)))

(reduce * 
  (first 
    (filter pythagorean? 
      (map makeTriple 
        (filter validOrder? 
          (combinations (range 1 (/ 1000 2)) 2))))))
}}}

= 박상혁 =
{{{#!gcode scheme
; 피타고라스 트리플 시퀀스 생성.
; http://en.wikipedia.org/wiki/Pythagorean_triple 의 Euclid's Fomula 참고.
(defn phytagorean_triplet [t]
  (for [n (range 1 (+ t 1)) m (range 1 n)] 
    [(- (* n n) (* m m)) (* 2 n m) (+ (* n n) (* m m))]))
; 트리플이 합이 1000 인 것의 첫번째를 가져와서 * 로 reduce
(reduce * 
  (first (drop-while #(not (= (reduce + %) 1000)) (phytagorean_triplet 1000))))
}}}

= 박일 =
{{{#!gcode scheme
(ns your-namespace
(:use clojure.contrib.math))

(defn get-c [a b]
  (+ (* a a) (* b b)))

; a^2 + b ^ 2 가 정수의 제곱값인가?
(defn pythagorean? [a b]
  (if (= 0 (last (exact-integer-sqrt (get-c a b))))
    true
    false
  )
)

; a < b 인 범위 중에서 pythagorean 인 경우를 찾아 seq 로 만든다.
(defn get-pyta-to [n]
  (for [a (range 1 n) b (range (+ a 1) n) :when (pythagorean? a b)]
		 (let [c (first (exact-integer-sqrt (get-c a b)))]
		   (seq [(* a b c) a b c (+ a b c)])
		 )
   )
)

; * a b c 값을 얻는다.
(defn euler9 [n s]
  (first
	  (first
	    (filter #(= s (last %)) (get-pyta-to n))
	  )
   )
)

(euler9 1000 1000)
}}}
