[POSA1]
[[TableOfContents]]
= Blackboard Pattern =
 * Blackboard 아키텍쳐는 결정적 솔루션이 없는 문제를 위한 해법을 제공.
     경험적 문제해결 방법.
 * 각 서브 시스템들은 부분적인 솔루션을 구축하기 위해 지식을 조립
== Example ==
 * 음성인식
  * Input - Waveform 
  * Output - Phrases
  * Wave >> 음성 분석 >> 단어,음소 분리 >> 언어 처리 >> 후보 단어, 후보 음소 찾기 >> 문장 출력
  * 음소추출, 후보단어 검색 등의 다양한 지식영역에서 작업한다. 서로 다른 데이터 표기법이 필요
      전문가 시스템 - 하나의 데이터 표기.
  * 서로 다른 데이터 표현을 갖는 개별 문제들은 개별적인?추론엔진이 필요.
      전문가 시스템 - 하나의 추론엔진 사용.
  * 문제 해결 = 지식의 조합.
      AI 시스템 - 문제 해결 = 검색
  
== Context ==
 * 가능하거나 알려져 있는 솔루션이 없는 미성숙 영역.
 * 음성인식 특성
  * 완벽한 알고리즘 존재하지 않음.
  * 발음상의 모호성. 노이즈. 화자의 특징 등.
== Problem ==
 * Vision,Image recognition, Speech recognition. Etc.
  * No deterministic solution !
 * 문제를 여러 여러 전문 분야들과 연관된 하위 문제들로 분할.
 * 개별적인 문제들에 대한 솔루션들은 서로 다른 표현방법과 패러다임을 갖는다.
=== Forces ===
 * DB 검색 시간의 한계 
    - i.e. 어휘 DB 내에서 문장구성을 위한 검색
 * 알고리즘의 교체 용이성 필수.
 * 부분적인 문제를 해결하기 위한 개별적인 알고리즘들이 존재. 
    - i.e. 음소추출 알고리즘, 구문 생성 알고리즘.
 * 입력 및 중간 결과, 최종결과는 서로 다른 표기법 및 알고리즘을 갖는다.
  * 여러 다른 시스템을 종합해서 하나의 시스템을 만들려고 할 때.
 * 어떤 알고리즘은 다른 알고리즘의 결과물을 필요로 한다.
 * 알고리즘을 분할하면 병렬처리가 가능해진다.

== Solution ==
 * Blackboard 아키텍쳐 - 공통 데이터 구조상에서 상호 협동하는 독립적인 프로그램들의 집합.
 * 작업 상태에 따라서 시스템에 의해 취해지는 방향이 결정. 제어 컴포넌트는 현재 작업 상태를 평가하고 독립된 프로그램들을 조정한다.
    - opportunistic problem solving. - 한가지 문제를 해결하기 위해 서로 다른 알고리즘을 가지고 실험을 가능하게 함. heuristic approach.
 * 솔루션 영역 (Solution Space) : 가능한 모든 솔루션들의 집합.

== structure ==
 * Blackboard : 중앙 데이터 저장소. 솔루션영역의 요소들과 제어 데이터를 저장. 
 * Knowledge Source : 전체 문제 영역 중 특정한 문제를 해결하기 위한 독립적인 서브 시스템
  * Condition part - Blackboard의 상태로 현재 점수(score) 계산.
  * Action part
      Knowledge Source 가 작업한 결과를 리턴.
      이 결과는 Blackboard의 상태를 바꿀 수도 있다.
 * Control Component : Blackboard의 상태의 모니터링 및 스케줄링.
  * Control Knowledge Source : 제어에 해당하는 결정을 계산하는 특수한 Knowledge Source.

== Terminology ==
 * Vocabulary
     Blackboard상에 나타날 수 있는 모든 Data Element의 집합.
 * Hypothesis (Blackboard Entry)
     문제 해결 과정 중에 생성되고 Blackboard에 삽입. 문제 해결 후 탈락된 가설은 Blackboard 에서 삭제된다.
 * Hypothesis 속성
   * 추상레벨
     * 입력으로부터의 개념적 거리.
        하위레벨 (웨이브 입력), 상위레벨(문장출력)
   * 후보단어의 랭킹정보, 주파수 추출 간격 etc.

== Implementation ==
 1. 문제정의.
   * 문제영역과 솔루션에 대한 일반적 지식영역을 구체화.
   * 시스템의 입력을 정의. 입력상의 특성을 결정한다.
   * 시스템의 출력을 정의. fail-safe behavior
   * 사용자와 상호 작용하는 방법을 정의.
 2. 문제에 대한 솔루션 영역을 정의.
   * Top-level, Intermediate Solutions.
 3. 솔루션의 처리단계를 분할.
   * 솔루션의 전달방법을 정의.
   * 가설의 예측 및 검증 방법 정의.
 4. Knowledge 를 Knowledge Source들로 분할.
      i.e. Segmentation, 음소생성, 음절, 단어, 구문생성, 단어 예측 및 검증.
 5. Blackboard 의 Vocabulary 를 정의.
   * Data representation 정의
   * i.e. ABOUT+FEIGENBAUM+AND+FELDMAN+] (phrase) (48:225) (83)
   * 필요하다면 Knowledge sources 가 서로의 결과를 공유할 수 있도록 공통 언어(vocabulary)를 만들어라.
 6. 시스템의 Control 을 정의.
   * Heuristic한 방법에 의한 Knowledge Source 간 스케줄링.
 7. Knowledge Source 를 구현.
   * Condition part & Action part.
   * 서로 다른 방법으로 Knowledge Source를 구현가능.	
	
== Variants ==
 * Product System
 * Repository
    Blackboard system : internal control 에 의해 작동
    Repository : 사용자 입력이나 external control 에 의해 작동
    Repository 이나 Blackboard system 이 아닌 예 : compiler, DB

== Known Uses ==
 * HEARSAY-II
 * HASP/SLAP
 * CRYSALIS
 * TRICERO
 * Generalizations of the Blackboard.
 * SUS

== Consequences ==
=== Benefits ===
 * 경험적 해결방법 제공
 * 모듈 교체 및 유지 관리의 용이성
 * Knowledge Source들의 재사용.
 * Fault tolerance & Robustness
=== Liabilities ===
 * 테스트의 어려움
 * 우수한 솔루션이 보장될 수 없음.
 * 우수한 제어 전략수립의 어려움
 * 성능저하문제
 * 높은 개발 노력
 * 병렬실행 지원 불가

== Related Patterns ==
