루프 불변식(loop invariant)

== 설명 ==
 * loop 의 시작 전과 loop 의 본체 끝에서 불변식이 참이 되는지를 검사
 * 혹은 loop 가 매번 조건식을 검사할 때와 loop 이 끝난 후 불변식이 참이 되는지를 검사

=== 용어 ===
 * 초기화(initialization) : 루프가 처음 실행될 때 불변식이 참이다.
 * 보존(Preservation) : 불변식이 루프의 시작 부분에서 참인 상태로 루프 내의 구문이 실행되면, 루프 내 구문의 실행이 끝난 후에도 불변식은 여전히 참일 것이다.
 * 종료(Termination) : 루프가 종료되고 원하는 결과를 얻게 된다.

== 예 1 ==
{{{
//불변식 : 지금까지 r 개의 행을 출력함
int r = 0;
// r 을 0 으로 세팅하면 불변식을 참으로 만듭니다.
while (r != rows) {
	// 여기에서 불변식이 참이라고 가정할 수 있습니다.
	// 한 행을 출력하면 불변식이 거짓이 됩니다.
	std::cout << std::endl;
	// r을 증가시키면 불변식을 다시 참으로 만듭니다.
	++r;
}
// 여기에서 불변식이 참이라고 확신할 수 있습니다.
}}}

== 예 2 ==
{{{
// rows 만큼의 행 출력
// 불변식 : 지금까지 r개의 행을 출력함
for (int r = 0; r != rows; ++r) 
{
	string::size_type c = 0;
	
	// 불변식: 지금까지 현재 행에 c 개의 문자들을 출력함
	whlie (c != cols) 
	{
		// 인사말을 출력할 차례인지?
		if (r == pad + 1 && c == pad + 1) {
			cout << greeting;
			c += greeting.size();
		} else {
			// 경계에 있는지?
			if (r == 0 || r == rows - 1 || c == 0 || c == cols - 1) {
				std::cout << "*";
			} else {
				cout << " ";
			}
			++c;
		}
	}
	cout << endl;
}
}}}

출처: Accelerated C++
