= Half-Sync, Half-Async Patterns = 

== PPT ==
attachment:hsha.zip

== Example ==
 자, 우리가 telnet, ftp, httpd 와 같은 프로그램을 작성한다고 가정하자. 그런데 네트웍에 대해 랜 카드의 인터럽트를 받아서 이를 각각 처리해야 한다고 생각해보자. 생각만 해도 끔찍할 것이다. 현재 OS에서 이러한 Asyncronous Interrupt 또는 event 를 처리해 주고 telnet 등의 프로그램은 이 OS 로 부터 데이터를 받아서 처리한다. 

 Half-Sync, Half-Async 는 이런식으로 Asyncronous 의 장점(Peformance)과 Syncronous 의 장점(Simplicity)을 취하기 위한 패턴이다.

== 무엇이 문제인가?(왜 Half-SYnc, Half-Async 가 필요한가?) ==
 * Concurrent System 을 작성하다 보면 Asynchronous Service 와 Synchronous   Service를 함께 섞어야 할 때가 있다. 그런데 Synchronous 한 방법은 구현은 쉬우나 성능이 떨어지고, Asynchronous 한 방법은 잘만들면 성능은 좋게 만들 수 있으나, 구현하기가 어렵다.

== Half-Sync, Half-Async 에서 고려할점 ==
 * Synchronous 의 구현의 Simplicity 와, Asynchronous 의 Performence 를 고려해야한다.
 * 복잡한 프로그램 모델이나 성능 저하 없이 Synchronous 와 Asynchronous processing Service 가 Communicate 할 수 있어야 한다

== 해결책 ==
 * 크게 Synchronous Layer 와 Asynchronous Layer 로 분리하고, 그 안에 Queueing Layer 를 둔다.( 총 3개의 Layer로 나뉜다. )

== Structures ==
 * Synchronous Service Layer
  Queueing Layer 하고만 통신한다. 
 * Queueing Layer
  Asynchronous Layer에서 데이터를 받아서 Synchronous Layer로 전달한다.
 * Asyncronous Layer
  External Event Source 로 부터 발생하는 데이터를 Queueing Layer로 전달한다.
 * External Event Source
  실제적으로 비동기적으로 발생하는 이벤트, 또는 인터럽트

== 동작 ==
 * Asynchronous phase 
  External Source 에서 인터럽트의 이벤트 발생, Asynchronous Event
  Notification 을 이용해서 Queueing Layer로 전달한다
 * Queuing phase
  Asynchronous Layer 로 부터 받은 데이터를 Synchronous Layer로 전달한다.
 * Synchronous phase
  Queueing Layer 로 부터 데이터를 받아서 처리한다. 
 
== 구현 ==
 1. 시스템의 모든 작업을 Synchronous Layer, Asynchronous Layer, Queueing Layer 로 분리한다.
  * Identify higher-level and/or long-duration services and configure them into the synchronous layer.
  * Identify lower-level and/or short-duration services and configure them into the Asynchronous layer.
  * Identify inter layer communication strategies  and configure them into the Queueing layer

 2. Implement the services in the synchronous layer.

 3. Implement the services in the Asynchronous layer.
  * Asynchronous interrupt
  * Proactive I/O

 4. Implement the Queuing Layer
  * Implement the buffer Strategy
    * Implement the ordering strategy
    * Implement the serialization strategy
    * Implement the notification strategy
    * Implement the flow-control strategy
  * Implement the (de)multiplexing mechanism
 
== 장점 ==
 1. Simplification and Performance.
 2. Separation of concerns.
 3. Centralization of inter-layer communication

== 단점 ==
 1. A boundary-crossing penalty may be incurred from context switching, synchronization, and data copying overhead.
 2. Higher-level application service may not benefits from the efficiency of asynchorous I/O
 3. Complexity of debugging and testing
