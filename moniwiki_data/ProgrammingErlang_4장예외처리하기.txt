= 예외 발생 시키기 =
 == 존재하지 않는 함수 호출  ==
{{{
8> shop:cost(milk3).

=ERROR REPORT==== 11-Jul-2008::08:34:10 ===
Error in process <0.32.0> with exit value: {function_clause,[{shop,cost,[milk3]}
,{erl_eval,do_apply,5},{shell,exprs,6},{shell,eval_loop,3}]}

** exited: {function_clause,[{shop,cost,[milk3]},
                             {erl_eval,do_apply,5},
                             {shell,exprs,6},
                             {shell,eval_loop,3}]} **
}}}
 == 직접 발생시키기 ==
{{{#!gcode erlang
generate_exception(1) -> a;
generate_exception(2) -> throw(a); %% 예외생성됨
generate_exception(3) -> exit(a); %%  예외 생성됨 
generate_exception(4) -> {'EXIT', a}; 
generate_exception(5) -> erlang:error(a). %% 예외 생성됨
}}}
= 예외를 받아보자 =
 == 기본형 ==
  * 예외 처리 코드
{{{#!gcode erlang
demo1() ->
     [catcher(I) || I <- [1,2,3,4,5]].
catcher(N) ->
   try generate_exception(N) of
       Val -> {N, normal, Val}
   catch
       throw:X -> {N, caught, thrown, X};
       exit:X  -> {N, caught, exited, X};
       error:X -> {N, caught, error, X}
   end.
}}}
   * 실행 결과
{{{
9> try_test:demo1().
[{1,normal,a},
 {2,caught,thrown,a},
 {3,caught,exited,a},
 {4,normal,{'EXIT',a}},
 {5,caught,error,a}]
}}}
 == catch 기본명령을 이용하여 한번에 받기 ==
  * 소스코드 
{{{#!gcode erlang
demo2() ->
    [{I, (catch generate_exception(I))} || I <- [1,2,3,4,5]].
}}}
  * 실행결과
{{{
10> try_test:demo2().
[{1,a},
 {2,a},
 {3,{'EXIT',a}},
 {4,{'EXIT',a}},
 {5,
  {'EXIT',{a,[{try_test,generate_exception,1},
              {try_test,'-demo2/0-lc$^0/1-0-',1},
              {try_test,'-demo2/0-lc$^0/1-0-',1},
              {erl_eval,do_apply,5},
              {shell,exprs,6},
              {shell,eval_loop,3}] } } }]
}}}
  == 가능한 모든 예외를 잡기 ==
{{{#!gcode erlang
try Expr
catch
   _:_ -> ... 모든 예외를 처리하는 코드 ...
end
}}}

 == 예외 발생시 스텍을 찍어보자 ==
  * 소스 코드
{{{#!gcode erlang
demo3() ->
    try generate_exception(5) 
    catch
       error:X ->
	    {X, erlang:get_stacktrace()}
    end.

}}}
  * 실행 결과
{{{
11> try_test:demo3().
{a,[{try_test,generate_exception,1},
    {try_test,demo3,0},
    {erl_eval,do_apply,5},
    {shell,exprs,6},
    {shell,eval_loop,3}]}
}}}
 = try .. catch 프로그래밍 스타일 =
  == 흔히 오류가 반환 되는 코드 ==
{{{#!gcode erlang
  case f(X) of 
       {ok,Val} -> do_some_thing_with(Val);
       {error,Why} -> %% 오류로 무엇인가를 한다.
  end,
}}}
  == 오류가 날 수는 있으나 드문 경우의 코드 ==
 * 사용법
{{{#!gcode erlang
  try my_func(X)
  catch
     throw:{thisError,X} -> ..
     throws:{someOhterError,X) -> ...
  end
}}}
  * 정의 
{{{#!gcode erlang
   my_func(X) ->
        case ... of
             ... -> .. throw({thisError,...)}
             ... -> .. throw({someOhterError, ...})
}}}
