[[TableOfContents([maxdepth])]]

== Bee Maja ==

=== !ModuleMain.vb ===
{{{
Public Module ModuleMain

	Sub Main()
		While True
			Console.WriteLine(Run(Console.ReadLine()))
		End While
	End Sub

	Function Run(ByVal input As String) As String
		Dim willi As Integer
		Try
			willi = Integer.Parse(input)
		Catch ex As Exception

		End Try

		If willi <= 0 Or willi >= 100000 Then Return Nothing

		Dim hive As New BeeHive()
		Dim maja() As Integer = hive.GetMaja(willi)

		Return maja(0).ToString() + " " + maja(1).ToString
	End Function

End Module
}}}

=== !BeeHive.vb ===
{{{
Public Class BeeHive

	Sub New()
		CreateConvertTable()
	End Sub

	Private _table As New List(Of List(Of Integer))
	Private _willi As Integer

	Sub CreateConvertTable()
		_table.Clear()
		_willi = 0

		AddToTable(-1, -1)	 ' dummy

		Dim level = 0

		Dim x As Integer = 0
		Dim y As Integer = 0
		AddToTable(x, y)

		While _willi < 100000
			level += 1

			y += 1
			AddToTable(x, y)

			While x > 0
				x -= 1
				y += 1
				AddToTable(x, y)
			End While

			While x > -level
				x -= 1
				AddToTable(x, y)
			End While

			While y > 0
				y -= 1
				AddToTable(x, y)
			End While

			While y > -level
				x += 1
				y -= 1
				AddToTable(x, y)
			End While

			While x < level
				x += 1
				AddToTable(x, y)
			End While

			While y < 0
				y += 1
				AddToTable(x, y)
			End While
		End While
	End Sub

	Sub AddToTable(ByVal x As Integer, ByVal y As Integer)
		Dim maja() As Integer = {x, y}
		_table.Add(New List(Of Integer)(maja))

		_willi += 1
	End Sub

	Function GetMaja(ByVal willi As Integer) As Integer()
		Dim maja(1) As Integer

		maja(0) = _table(willi)(0)
		maja(1) = _table(willi)(1)

		Return maja
	End Function

End Class
}}}

=== !BeeHiveTest.vb ===
{{{
<TestClass()> _
Public Class BeeHiveTest

	<TestMethod()> _
	Public Sub GetMajaTest()
		Dim hive As BeeHive = New BeeHive()

		Dim expected(1) As Integer
		Dim actual() As Integer

		expected(0) = 1
		expected(1) = 1
		actual = hive.GetMaja(8)
		CollectionAssert.AreEqual(expected, actual)

		expected(0) = 0
		expected(1) = 2
		actual = hive.GetMaja(9)
		CollectionAssert.AreEqual(expected, actual)

		expected(0) = 1
		expected(1) = 2
		CollectionAssert.AreEqual(expected, hive.GetMaja(21))

		expected(0) = -1
		expected(1) = 3
		CollectionAssert.AreEqual(expected, hive.GetMaja(23))
	End Sub

	<TestMethod()> _
	Public Sub InputOutputTest()
		Dim input As String

		input = "1"
		Assert.AreEqual("0 0", ModuleMain.Run(input))
		input = "8"
		Assert.AreEqual("1 1", ModuleMain.Run(input))
		input = "23"
		Assert.AreEqual("-1 3", ModuleMain.Run(input))
	End Sub

End Class
}}}
