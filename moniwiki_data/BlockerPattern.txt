[POSA1]
[[TableOfContents]]
= Broker =
분산 소프트웨어 환경에서 원격 서비스 호출을 decouple 할 때 사용.

== Example ==

== Context ==

== Problem ==
 * 많은 컴포넌트를 이용하는 대용량 시스템이 필요
 * 컴포넌트들은 decoupled 이어야 하고 분산되어 있어야 한다.
 * 서비스는 각 컴포넌트들을 동적으로 추가/삭제/활성/비활성 시킬 수 있어야 한다.
 * 컴포넌트 디자이너는 다른 컴포넌트를 몰라도 작업할 수 있어야 한다.
 
== Solution ==
 * Broker 가 서버와 클라이언트를 중계한다.
 * 클라이언트는 Broker 에게 요청을 전달한다.
 * Broker 는 이 요청을 적절한 서버에게 전달하고 결과를 클라이언트에게 리턴한다.

== Implementation ==

== Known Uses ==
 * CORBA
 * OLE/DCOM/Active X
 * JADE : Multi-agent systems
 * WWW : www name server 는 URL 를 IP 로 바꿔주는 broker 역할을 한다.
 * 포탈 사이트. 유저(Client)는 포탈(Broker)을 통해서 원하는 서비스(링크되어 있는 웹페이지)로 이동한다.

== Variants ==
 * Direct Communication Broker System
    클라이언트는 Broker(혹은 load balancer)에게 적절한 서버 위치를 얻은 후 직접 서버로 접속, 서버-클라이언트간 데이타 전송을 Broker 를 통하지 않고 직접 할 수 있다.
 * Message Passing Broker System
 * Trader System
 * Adapter Broker System
 * Callback Broker System

== Consequences ==
=== Benefits ===
 * 컴포넌트를 독립적으로 개발 가능
 * 위치 독립성
 * 컴포넌트를 쉽게 개조 가능
 * Broker 를 쉽게 개조 가능
=== Liabilities ===
 * fault tolerance 가 낮다. 서버 뿐만 아니라 Broker 의 fault 위험도 존재.
  * replication 을 둬서 realiability 를 증가시킬 수 있다. ex) google 의 저장된 페이지
 * 효율이 떨어진다.
=== Benefits & Liabilities ===
 * 클라이언트는 테스트가 쉽다
 * 전체 서비스는 테스트 & 디버깅이 어렵다.
  * 에러 원인이 broker 인지 서버인지를 매번 알아야 한다.
== Related Patterns ==
 * ForwarderReceiverPattern
 * ProxyPattern
 * ClientDispatcherServerPattern
    Direct Communication Broker 의 간단한 버전. dispatcher 는 클라이언트와 서버 사이의 채널을 관리한다.
 * MediatorPattern
