== 고급 루틴 ==
=== 루틴을 작성하는 타당한 이유 ===
 * 복잡성을 줄인다.
 * 이해하기 쉬운 중간 단계의 추상화를 도입한다.
 * 코드의 중복을 피한다.
 * 서브 클래싱을 지원한다.
 * 순서를 숨긴다???
 * 이식성을 향상시킨다.
 * 복잡한 불린 테스트를 단순화한다.
 * 성능을 개선한다. 80:20 법칙
 * 모든 루틴들이 작다는 것을 보장하기 위해서?
=== 루틴으로 작성하기에는 너무 단순해 보이는 연산 ===
=== 루틴 작성의 이유에 대한 요약 ===

=== 루틴 수준에서의 설계 ===
응집성.

=== 좋은 루틴 이름 ===
 * 루틴이 하는 모든 것을 표현하라.
 * 의미가 없거나 모호하거나 뚜렷한 특징이 없는 동사들을 피하라.
 * 루틴 이름을 숫자만으로 구분하지 마라.
 * 필요한 길이만큼 루틴의 이름을 만들어라. 9-15자
 * 리턴 값에 대한 설명을 사용하라.
    {{{IsReady(), CurrentColor()}}}
 * 확실한 의미를 갖는 동사 다음에 객체를 사용하라.
 * 반의어를 정확하게 사용하라.
 * 공통적인 연산을 위한 규약을 만들어라.
    기존 코드는 어떤 naming 을 사용했는지 확인.

=== 루틴의 길이에 대한 문제 ===
 * 루틴의 크기와 오류는 반비례???
 
=== 루틴의 매개변수를 사용하는 방법 ===
 * 매개변수를 입력-수정-출력 순서로 입력한다.
 * 고유한 in 과 out 키워드 생성을 고려한다.
 * 유사한 매개변수들을 일관된 순서로 입력하라.
 * 모든 매개변수들을 사용하라.
 * 상태나 오류 변수를 마지막에 입력한다.
 * 루틴의 매개변수를 작업용 변수로 사용하지 말라.
    input 은 항상 const 로 만들자.
 * 매개변수에 대한 인터페이스 가정을 문서화하라.
 * 루틴 매개변수의 수를 7개 정도로 제한.
 * 매개변수에서 사용한 입력, 수정, 출력 이름 규약을 고려
 * 루틴이 인터페이스 추상화를 유지해야 할 필요가 있는 변수나 객체를 전달하라 ???
 * 이름(named) 매개변수를 사용하라.
 * 실질적인 매개변수가 형식적인 매개변수와 일치하는지 확인하라.
 
=== 함수 사용시 특별히 고려해야 할 사항들 ===
 * 함수 : 리턴값이 있는 루틴
 * 프로시저 : 리턴값이 없는 루틴
==== 함수를 사용할 때와 프로시저를 사용할 때 ====
==== 함수의 리턴 값 설정 ====
 * 가능한 모든 리턴 경로를 검사하라.
 * 지역 데이터에 대한 참조나 포인터를 리턴하지 마라.
 
=== 매크로 루틴과 인라인 루틴 ===
문제점들.
==== 인라인 루틴 ==== 
