[POSA1]
[[TableOfContents]]
= Layer =
레이어 패턴은 어플리케이션을 추상레벨의 서브 태스크들의 그룹으로 분해할 수 있도록 구조화한다.

== Example ==
OSI 7-layer model 

== Context ==
 * 서브 태스크 들로 분해 해야 하는 대규모 시스템인 경우.
 * 상위 모듈이 하위 모듈에 의존하는 시스템을 설계.
 * 요구흐름이 상위로부터 하위레벨로 이동하고 요구에 대한 응답이나 입력 데이터와 그에 대한 이벤트 통지가 반대로 이동.

== Problem ==
 * 추후의 소스코드 변경이 시스템에 영향을 주어선 안 됨.
 * 시스템의 일부는 교환 가능해야 한다. 
 * 복잡한 컴포넌트들은 추후에 분해되어야 한다.
 * 시스템은 팀 단위 개발자들에 의해 구축되어지며 작업은 분할되어진다. 

== Solution ==
 * 시스템을 적당한 수의 레이어로 구조화하고 다른 레이어의 위에 쌓는다.
    - Layer 1, … Layer J-1, Layer J
 * 각각의 레이어의 서비스들은 하위 레이어의 서비스를 조합하여 구현된다. 
== structure ==
Layer J의 서비스는 Layer J+1에 의해 사용되어진다.
== Dynamics ==
Top-down communication.
  Layer J -> Layer 1.
Bottom-up communication.
  Layer 1 -> Layer J.
통신 프로토콜 스택 - TCP/IP suit.

== Implementation ==
1. 태스크를 레이어로 그룹화 하기 위해 추상 범주를 정의. 
2. 추상범주에 따라 추상레벨의 수를 결정.
3. 레이어의 이름을 명명하고 각각에 태스크를 할당.
4. 서비스를 구체화.
5. 레이어를 정제하고 각각의 레이어에 대한 
인터페이스를 구체화.
7. 개별 레이어를 구조화.
8. 인접 레이어 사이와의 통신을 구체화.
9. 인접 레이어를 분리.
10. 에러 처리 전략을 설계.

== Thinks about it ==
성능을 위해서 레이어 규칙을 정확히 따르지 않음. Relaxed Layered System.

== Variants ==
 * Relaxed Layered System
  * 레이어 간의 관계가 엄격하지 않은 레이어 패턴.
  * 유동성과 성능의 획득대신 유지보수의 이점을 희생.
 * 상속을 통한 계층화
  * 장점 : 상위 레이어는 하위 레이어의 서비스를 그들의 요구에 맞게 수정이 가능.
  * 단점 : 상속관계는 상위 레이어와 하위 레이어를 강하게 엮는다. 베이스 클래스가 변경되면 모든 하위 클래스는 재 컴파일 되어야 한다.

== Known Uses ==
 * 가상머신
 * API
 * Information Systems(IS)
  * Presentation
  * Application logic
  * Domain layer
  * Database
 * Windows NT
  * Microkernel

== Consequences ==
=== Benefits ===
 * 레이어의 재사용이 가능. 
 * 표준화를 지원. - POSIX interface.
 * 시스템내의 변경에 대한 여파를 감쇄.
 * 모듈 교체가 용이.
=== Liabilities ===
 * 레이어간의 일괄적인 변경 작업이 수반됨.
 * 상대적으로 낮은 효율.
 * 불필요한 추가작업.
 * 올바른 레이어 설계의 어려움.

== Related Patterns ==
Composite Message
[MicrokernelPattern]
[PAC]

== Code ==
{{{
#include <iostream.h>

class L1Provider {
public:
	virtual void L1Service() = 0;
};

class L2Provider {
public:
	virtual void L2Service() = 0;
	void setLowerLayer(L1Provider* l1) { level1 = l1; }
protected:
	L1Provider* level1;
};

class L3Provider {
public:
	virtual void L3Service() = 0;
	void setLowerLayer(L2Provider* l2) { level2 = l2; }
protected:
	L2Provider* level2;
};

// ----------------------------
class DataLink : public L1Provider {
public:
	virtual void L1Service() {
		cout << "L1Service doing its job" << endl; }
};

class Transport : public L2Provider {
public:
	virtual void L2Service() {
		cout << "L2Service starting its job" << endl;
		level1->L1Service();
		cout << "L2Service finishing its job" << endl; }
};

class Session : public L3Provider {
public:
	virtual void L3Service() {
		cout << "L3Service startring its job" << endl;
		level2->L2Service();
		cout << "L3Service finishing its job" << endl; }
};

// ---------------------------------
int main (void)
{
	DataLink dataLink;
	Transport transport;
	Session session;

	transport.setLowerLayer(&dataLink);
	session.setLowerLayer(&transport);
	session.L3Service();

	return 0;
}
}}}
