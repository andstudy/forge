'''알고리즘 디자인 기법'''

[[TableOfContents]]

= 배경 =
[생각하는프로그래밍-칼럼2-아하알고리즘]에서 '''통찰과 기초적인 조작을 이용한 알고리즘 디자인'''에 대해 이야기 했다. 
이번 칼럼 에서는 '''세련된 알고리즘 기법을 이용한 디자인''' 에 대해 이야기 해보자.

= 메인 스트림 =
'''음수를 포함한 1차원 벡터의 최대 부분합 구하기'''

|| -1 || 5 || -1 || 9 || 3 || 4 ||

Worst Case 부터 Best Case 까지 다양한 알고리즘 기법을 이용해서 문제 해결 알고리즘을 디자인 해 본다.

== O(n³) ==
 하한 만들어 보기. Worst Case는 생각보다 만들기 쉽다?

 비트겐슈타인.. 그리고 매트릭스.. 현실에 대한 인식..

 C언어가 아닌 함수형 언어로 프로그래밍을 했다면,
 Worst Case 디자인은 어떤 형태가 될까?


== O(n²) ==
 ① 상태값 이용하기
 ② 누적 정보테이블 이용하기
 
== O(n log n) ==
Divide and Conquer
 연습문제 15. 귀납정의 

 {{{
 |    a     |    b    |
 }}}
 {{{
 |   | Max_a |     |   | Max_b |    |
 }}}
 {{{
 |   | Max_c |  |
 }}}

== O(n  ) ==
스캐닝 알고리즘.

 {{{
 maxsofar = 0
 maxendinghere = 0
 for i = [0, n)
  maxendinghere = max(maxendinghere + x[i], 0)
  maxsofar = max(maxsofar, maxendinghere)
 }}}
 || Index || 0 || 1 || 2 || 3 || 4 || 5 ||
 || Value || '''-1''' || '''5''' || '''-1''' || '''9''' || '''3''' || '''4''' ||
 || Mx S  || 0 || 5 || 5 || 13 || || ||
 || Mx E  || 0 || 5 || 4 || 13 || ||  


 배열에 대한 문제는 
 "x[0..i-1]에 대한 답을 어떻게 x[0..i] 대한 답으로 확장할 수 있을까?"
 라는 물음에 의해 풀린다.


= 세련된 알고리즘 디자인 기법?? =
 * 동적프로그래밍
 * 나누어 풀기
 * 누적
 * 하한
 * 정보를 사전처리하여 데이터 구조에 보관
 * 스캐닝 알고리즘

= 연습문제 = 
 피보나치 수열 증가 예측하기

 f(0) = 0
 f(1) = 1
 f(2) = 1
 f(3) = 2
 f(4) = 3
 f(5) = 5
 f(6) = 8

 y = f(x) 일때,

 y 가 int 형으로 나타낼 수 있다면, 버퍼오버플로우가 일어나지 않게 하는 x는?


= 결론 =
다양한 세련된(?) 알고리즘 디자인 기법을 배워 봤다.

고수가 간단한 예제로 '썰을 풀다'

독수리에게는 지상 맹수의 사냥 법이 이해가지 않는다..

프로그램언어의 한계로 인해 사고가 한정되어지진 않았을까?



