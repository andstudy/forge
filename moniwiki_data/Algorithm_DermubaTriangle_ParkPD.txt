Wrong Answer 나오네요. 문제가 될만한 테스트 케이스 있으면 좀 알려주세요. [ParkPD]
ios설정값을 바꿔서 소수부 정밀도를 높이거나 printf를 사용해서 출력해보세요. [itmentor]
{{{
/* @JUDGE_ID:parkpd 110401 Cpp "test" */

/* @BEGIN_OF_SOURCE_CODE */

#include <iostream>
#include <vector>
#include <set>
#include <deque>
#include <list>
#include <stack>
#include <string>
#include <algorithm>
#include <map>
#include <limits>
#include <assert.h>
#include <iomanip>
#include <complex>
#include <math.h>

//#define _UNIT_TEST

#ifdef _UNIT_TEST
#include <Windows.h>
#include "../UnitTest++/src/UnitTest++.h"
#endif

using namespace std;

#ifdef max
#undef max
#endif

#ifdef min
#undef min
#endif

// Minimum Spanning Tree -> Prim Algorithm 을 생각하며 풀었음.

namespace ATUtil
{
	bool IsInRange(int value, int from, int to)
	{
		return (from <= value) && (value <= to);
	}

	int ConvertToIndex(char c)
	{
		if ('a' <= c && c <= 'z')
		{
			return c - 'a';
		}
		else
		{
			return -1;
		}
	}

	char ConvertToChar(int i)
	{
		return (char)i + 'a';
	}

#ifdef _UNIT_TEST
	class CStopWatch
	{
	public:
		CStopWatch()
		{
			m_StartTick = GetTickCount();		// gcc 에서 안 될 수 있으니까
		}

		~CStopWatch()
		{
			cout << "Time passed : " << GetTickCount() - m_StartTick << " milisec.\n";
		}

		int m_StartTick;
	};
#endif

	typedef map<int, int> IntDB;
	typedef vector<int> Ints;
	typedef list<int> IntList;

};

using namespace ATUtil;

#ifdef _UNIT_TEST

int main()
{
	UnitTest::RunAllTests();

	char temp;
	cin >> temp;

	return 0;
}

#endif

// code implement

namespace ATCode
{
	///////////////////////////////////////////////////////////////
	// CSolver
	class CSolver
	{
	public:
		void GetXY(int n, int& x, int& y)
		{
			if (0 == n)		// 원점
			{
				x = 0;
				y = 0;
				return;
			}

			// 최적화 1 번.
			//int comp = 1;
			//while (comp * comp <= n)
			//{
			//	++comp;
			//}
			//y = comp - 1;
			y = (int)sqrt((double)n);

			int width = y * 2 + 1;
			int midValue = (y * y) + width / 2;
			x = n - midValue;
		}

		double Input(int from, int to)
		{
			int x1, y1, x2, y2;
			GetXY(from, x1, y1);
			GetXY(to, x2, y2);

			// x 차이는 0.5 km
			// 삼각형 높이는 0.866025 km			
			// 외심(circumcenter) 중 긴 거리는 0.577350, 짧은 거리는 0.288675
			// 각 꼭지점과 외심을 잇는 선을 그어, 작은 직각 삼각형 3개가 만들어졌을 때,
			// c 는 빗면, b 는 밑면, a 는 높이
			// h 는 길이 1 km 의 정삼각형의 높이.
			const double a = 0.288675;
			const double b = 0.5;
			const double c = 0.577350;			
			const double h = a + c;

			int offsetX = abs(x1 - x2);
			int offsetY = abs(y1 - y2);
			int manhattanDist = offsetX + offsetY;

			double diffX = (double)offsetX * b;
			double diffY = 0.0;
			if (0 == manhattanDist % 2)		// 같은 높이(바닥에 가까운 점)
			{
				diffY = offsetY * h;
			}
			else
			{
				if (0 == offsetY)
				{
					diffY = (c - a);
				}
				else
				{
					if (0 == y1 % 2)
					{
						diffY = (offsetY - 1) * h + (2 * a);
					}
					else
					{
						diffY = (offsetY - 1) * h + (2 * c);
					}
				}				
			}

			double ret = sqrt(diffX * diffX + diffY * diffY);

			// 소수점 4째 자리에서 반올림하기.
			ret = ((int)((ret * 1000.0) + 0.5)) * 0.001;
			return ret;
		}

		vector<int> m_Levels;
	};

	///////////////////////////////////////////////////////////////
	// CConsole
	class CConsole
	{
	public:
		static void ConsoleTest(istream& input, ostream& output);
	};

	void CConsole::ConsoleTest(istream& input, ostream& output)
	{
		CSolver s;
		int from, to;
		while (input >> from >> to)
		{
			output << s.Input(from, to) << '\n';
		}
	};
}

using namespace ATCode;

#ifndef _UNIT_TEST

int main()
{
	CConsole::ConsoleTest(cin, cout);

	return 0;
}

#else

// tests

struct FixtureBase
{
	FixtureBase()
	{
	}

	int x, y;
	stringstream input;
	stringstream output;
};

TEST_FIXTURE(FixtureBase, GetXY)
{
	CSolver g;
	int tests[] = {
		0, 0, 
		-1, 1, 
		0, 1, 
		1, 1, 
		-2, 2
	};
	for (int i = 0; i < sizeof(tests) / sizeof(int); i += 2)
	{
		//cout << i / 2 << '\n';
		g.GetXY(i / 2, x, y);
		CHECK_EQUAL(tests[i], x);
		CHECK_EQUAL(tests[i + 1], y);
	}
}

TEST_FIXTURE(FixtureBase, Input)
{
	CSolver g;
	double tests[] = {
		0, 7, 1.528,
		2, 8, 1.528,
		9, 10, 0.577,
		10, 11, 0.577,
		7, 7, 0.0,
		10, 12, 1.0,
		2147483646, 2147483647, 0.577
	};

	for (int i = 0; i < sizeof(tests) / sizeof(double); i += 3)
	{
		cout << "Test Input : " << i / 3 << '\n';
		CHECK_CLOSE(tests[i + 2], g.Input((int)tests[i], (int)tests[i + 1]), 0.001);
	}
}

TEST_FIXTURE(FixtureBase, ConsoleTest)
{
	input << 
		"0 7\n"
		"2 8\n"
		"9 10\n"
		"10 11\n"
		;
	CConsole::ConsoleTest(input, output);
	CHECK_EQUAL( 
		"1.528\n"
		"1.528\n"
		"0.577\n"
		"0.577\n",
		output.str());
}

#endif

/* @END_OF_SOURCE_CODE */
}}}
