== 방어적인 프로그래밍 ==

=== 타당하지 않은 입력으로부터 프로그램의 보호 ===
쓰레기를 넣어도 쓰레기가 나오면 안 된다.
 * 외부로부터 들어오는 모든 데이터의 값을 검사하라.
    버퍼 오버플로우!
 * 루틴의 모든 입력 매개변수 값을 검사
 * 잘못된 입력을 어떻게 처리할 것인가?
 
=== Assertion ===
 * 절대로 발생해서는 안 되는 조건을 위해서 사용
 * 선행 조건과 후행 조건을 문서화하고 검증하기 위해 사용
    Effel 언어
 * assert 를 건 후 오류 처리를 한다.
    절대로 발생되어서는 안 되지만 발생 될 수도 있다.
    
=== 오류 처리 기법 ===
 * 중립적인 값 리턴
 * 다음에 오는 타당한 데이터로 대체 
    오류를 내는 데이타는 무시
 * 이전과 동일한 값을 리턴
 * 가장 가까운 타당한 값으로 대체
    자동차 후진할 때 속도계는 음수 대신 0을 보여준다.
 * 경고 메시지를 파일에 기록
 * 오류 코드를 리턴
  * 상태 변수에 값 설정. {{{GetLastError()}}}
  * 상태 값 리턴
  * 예외 메커니즘 사용 throw exception
 * 오류 처리 루틴이나 객체를 호출
 * 오류가 발생한 곳에서 오류 메시지를 출력
    Smart UI 방식. 
    오류 처리 코드가 여기 저기 퍼질 수 있다. 
    localization 이 어려워 질 수 있다.
    잠재적 공격자에게 필요 이상의 정보를 제공할 수 있다.
 * 지역적으로 가장 잘 작동하는 방법으로 오류 처리
 * 종료시킨다.
    안정성이 중요한 소프트웨어.
    
 * 견고성 대 정확성 - trade off 관계
 * 함수의 리턴값은 항상 확인한다. 리턴값이 의미 없다면 void 로 바꾼다.
 
=== 예외 ===
 * 무시되면 안 되는 오류를 알리기 위해 사용
 * 정말 예외적인 경우에만 사용
 * 책임 전가를 위해서는 쓰지 마라.
 * 생성자,소멸자에서는 쓰지 마라.
 * 올바른 추상화 수준에서 오류를 던져라.
    고차원 클래스는 고차원 예외만 던져라. 
 * 예외를 야기한 모든 정보를 예외 메시지에 포함시켜라.
 * 비어있는 catch 블록을 피해라.
    {{{catch(...)}}} 은 절대로 쓰지 않는다.
 * 라이브러리 코드의 예외도 파악해라.
 * 집중된 예외 보고자의 구축을 고려하라.
 * 예외 사용을 규격화하라.

=== 오류에 의해서 발생하는 손해를 막기 위한 방책 ===
방화벽, 무균실, 통관
 * 입력 시에 입력 데이터를 적절한 형으로 변환하라.
 * 방책을 사용하는 경우, 방책 외부에는 오류 처리를 하고, 방책 내부에는 assertion 을 건다.

=== 디버깅 보조 도구 ===
공격적인 프로그래밍
- 예외가 발생했을 때 개발 시에는 눈에 띄어야 하고 제품이 출시된 후에는 복구가 가능한 방법으로 처리되어야 한다. 즉, 오류 발생할 때 debug 버전에서는 "정신 차리자~" 이런 문구가 뜨게 하고, release 버전에서는 조용히 log 를 쓰게 만든다.
 * assert 가 프로그램을 중단하도록 한다. verify
 * 할당된 모든 메모리를 꽉 채워서 메모리 할당 오류가 어떻게 나는지 본다.
 * 파일 형식과 관련된 오류를 발견하기 위해 할당된 파일,스트림을 꽉 채운다.
 * 객체를 삭제하기 전에 쓰레기 데이터로 채운다.
 * 오류 로그를 이메일로 보낼 수 있게 만든다.

 * 전처리기를 이용해서 debug 버전에서만 돌아가는 코드를 만든다.
 * 디버깅 stub 을 사용

=== 제품 코드 안에 남는 방어적인 프로그래밍 코드 정하기 ===
 * 중요한 오류를 검사하는 코드는 남긴다.
 * 사소한 오류를 검사하는 코드는 제거한다.
 * 심각한 충돌을 야기하는 코드는 제거한다.
 * 프로그램이 우아하게 충돌하는 코드를 남긴다.
 * 기술적인 지원을 위해 오류를 logging 한다.
 * 남겨준 오류 메시지가 사용자에게 친절한 지 확인한다.
   에러코드 : 10054 가 아니라, 서버에 접속할 수 없습니다. 와 같은 에러문을 출력한다.
   에러 로그를 전송하겠습니까 도 물어보자.

=== 방어적인 프로그래밍에 대해서 방어적이 되는 것 ===
 적당한게 좋다.
