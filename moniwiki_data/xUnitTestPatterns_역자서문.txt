[xUnitTestPatterns] 상위로 가기

어느덧 '단위 테스트'라는 단어는 개발자들 사이에서 익숙해졌습니다. 팀에 적용하고 있다는 분들도 많더군요. JUnit 은 4.8 까지 나왔고, 구글에서도 GoogleTest 같은 프로젝트가 나왔습니다. CruiseControl 이나 Hudson 같은 CI (Continuous Integration) 툴에 단위 테스트를 붙여서 지속적인 통합을 하는 팀 뿐만 아니라, 단위 테스트 코드 커버리지 90% 이상 달성을 KPI 로 잡는 개발팀도 있다고 들었습니다.

이렇게 단위 테스트가 많이 전파된 것처럼 보이지만 막상 개발자들 얘기를 들어보면 고민이 많습니다. "제대로 된 책도 별로 없고, 모의 객체<Mock Object>를 어떻게 설정해야 하는지 잘 모르겠고, 함수 하나만 고쳐도 컴파일 에러가 너무 많이 나서 개발에 거치적거리는 것만 같고, 관리자는 그런 거 왜 하냐고 무시하기나 하고, 에이... 그냥 하지 말까..."

리니지2 개발팀에서는 2007 년 4월부터 단위 테스트(UnitTest++)를 도입했습니다. 처음부터 쉬웠던 건 아닙니다. 코드 여기저기를 #ifdef USING_TDD 로 감싸줬음에도 불구하고 테스트 대상 시스템<SUT, system unter test> 코드를 잘못 건드리는 바람에 오히려 없던 버그를 만들기도 하고, if (g_bTesting) 같은 테스트 훅<Test Hook>을 잘못 넣거나, 공유 픽스처<Shared Fixture>를 제대로 해체<Teardown>하지 않아서 다른 팀원들까지 많이 고생시켰습니다.

하지만, 많은 분들이 도와주신 덕분에 단위 테스트는 점차 안정되어 갔습니다. 2007 년에 200 여개였던 단위 테스트는 2009 년에는 1300 개 이상으로 늘었습니다. 단위 테스트가 실패하면 개발팀 전원에게 이메일을 보내 왜 테스트가 깨졌는지를 모두가 공유하고, 도와줄 수 있게 했습니다. 덕분에 나중에는 기획팀과 함께 단위 테스트 코드를 보면서 기능이 수정될 때 결과가 어떨지를 바로 확인할 수 있었고, 훨씬 편안한 마음으로 리팩토링하고 새로운 기능을 빠르게 추가할 수 있었습니다. KGC(Korea Games Conference) 2008 강연을 준비하면서 단위테스트가 팀의 개발에 어떤 도움을 주었는지를 보기 위해, 버그 트래커 자료를 기반으로 개발 기간동안 발생한 버그 개수와 에러 수정에 걸리는 시간을 팀 전체와 단위테스트가 적용된 파트로 나눠 조사해 보았습니다. 그 결과 단위 테스트 갯수가 늘어날 수록 버그 발생 비율이 낮아지고, 버그 수정 속도도 최대 2배 이상 빨라졌다는 것을 알 수 있었습니다. (관련자료 : http://parkpd.egloos.com/1944077)

이 책 xUnit Test Patterns 에는 단위 테스트에 대한 거의 모든 정보가 다 들어 있습니다. 이 책을 1-2년만 더 빨리 읽었더라면 삽질을 덜 했을텐데 아쉽더군요. '우리 프로젝트에서는 어떻게 적용해 볼 수 있을까' 를 생각하면서 읽으면 더 재미있게 보실 수 있습니다. 이해가 잘 안 될 때는, 예제 코드를 먼저 보세요. 때로는 천 마디 글보다 한 줄 코드가 더 이해하기 쉬울 때가 있으니까요.

이 책은 많은 분들의 노력 덕분에 나올 수 있었습니다. 먼저 이 책 번역을 권유해 주신 에이콘 출판사의 김희정 부사장님과 격주마다 챙겨주신 황지영 과장님, 부드럽게 읽을 수 있도록 꼼꼼하게 편집해 주신 박창기 편집자님께 감사합니다. 베타리딩에도 많은 분들이 참여해 주셨습니다. 김은하님, 오종빈님, 유석문님, 윤준호님, 이수안님, 정상혁님, 정희종님 덕분에 어색한 표현도 많이 고칠 수 있었고, 몰랐던 내용도 많이 알게 되었습니다. 감사합니다. 마지막으로 신혼인데도 불구하고 퇴근해서는 번역한다고 컴퓨터 앞에만 앉아있는 남편을 도와주고 챙겨준 아내에게 감사합니다. 결혼 안 했더라면 이렇게 두꺼운 책은 번역 못 했을 거 같네요.

블로그 : http://parkpd.egloos.com
위키 : http://andstudy.com/andwiki/wiki.php/xUnitTestPatterns
