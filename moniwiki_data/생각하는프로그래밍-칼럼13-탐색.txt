[[TableOfContents]]
= 목적 =
 * 중복이 없는 m개의 랜덤한 정수를 정렬된 된 순서로 생성
 * 아래의 인터페이스를 여러가지 방법으로 효율적으로 구성하는 방법을 찾아봄
{{{
class IntSetImpl {
public :
  IntSetImpl(int maxelements, int maxval);
  void insert(int t);
  int size();
  void report(int *v);
}
}}}
= 구현방법 = 
== 방법 1 : STL 이용 ==
{{{
class IntSetSTL {
private:
	set<int> S;
public:
	IntSetSTL(int maxelements, int maxval) { }
	int size() { return S.size(); }
	void insert(int t) { S.insert(t);}
	void report(int *v)
	{	int j = 0;
		set<int>::iterator i;
		for (i = S.begin(); i != S.end(); ++i)
			v[j++] = *i;
	}
};
}}}
 * STL의 set이 자동으로 정렬된 순서로 기록해줌
 * 해당 구현보다 효율적인 구현을 찾아보자

== 방법 2: 선형적 구조 ==
=== 배열이용 ===
{{{
class IntSetArr {
private:
	int	n, *x;
public:
	IntSetArr(int maxelements, int maxval)
	{	x = new int[1 + maxelements];
		n=0;
		x[0] = maxval; /* sentinel at x[n] */
	}
	int size() { return n; }
	void insert(int t)
	{	int i, j;
		for (i = 0; x[i] < t; i++)
			;
		if (x[i] == t)
			return;
		for (j = n; j >= i; j--)
			x[j+1] = x[j];
		x[i] = t;
		n++;
	}
	void report(int *v)
	{	for (int i = 0; i < n; i++)
			v[i] = x[i];
	}
};
}}}
 * 원소 개수만큼 배열을 할당함
 * 삽입시에 정렬된 상태를 유지하기 배열에 삽입될 t 보다 작은 값중의 max값의 위치의 오른쪽 배열 요소들은  한칸식 shift한후 해당 위치에 삽입 
 * 입력과 출력 모두 O(n) 시간이 소요됨

=== 방법 3: Linked List 를 이용 (집합의 크기를 미리 알 수 없는 경우) ===
{{{
class IntSetList {
private:
	int	n;
	struct node {
		int val;
		node *next;
		node(int i, node *p) { val = i; next = p; }
	};
	node *head, *sentinel;
	node *rinsert(node *p, int t)
	{	if (p->val < t) {
			p->next = rinsert(p->next, t);
		} else if (p->val > t) {
			p = new node(t, p);
			n++;
		}
		return p;
	}
public:
	IntSetList(int maxelements, int maxval)
	{	sentinel = head = new node(maxval, 0);
		n = 0;
	}
	int size() { return n; }
	void insert(int t) { head = rinsert(head, t); }
	void insert2(int t)
	{	node *p;
		if (head->val == t)
			return;
		if (head->val > t) {
			head = new node(t, head);
			n++;
			return;
		}
		for (p = head; p->next->val < t; p = p->next)
			;
		if (p->next->val == t)
			return;
		p->next = new node(t, p->next);
		n++;
	}
	void insert3(int t)
	{	node **p;
		for (p = &head; (*p)->val < t; p = &((*p)->next))
			;
		if ((*p)->val == t)
			return;
		*p = new node(t, *p);
		n++;
	}
	void report(int *v)
	{	int j = 0;
		for (node *p = head; p != sentinel; p = p->next)
			v[j++] = p->val;
	}
};
}}}

{{{
// Change from new per node to one new at init
// Factor of 2.5 on VC 5.0, 6% on SGI CC
class IntSetList2 {
private:
	int	n;
	struct node {
		int val;
		node *next;
	};
	node *head, *sentinel, *freenode;
public:
	IntSetList2(int maxelements, int maxval)
	{	sentinel = head = new node;
		sentinel->val = maxval;
		freenode = new node[maxelements];
		n = 0;
	}
	int size() { return n; }
	void insert(int t)
	{	node **p;
		for (p = &head; (*p)->val < t; p = &((*p)->next))
			;
		if ((*p)->val == t)
			return;
		freenode->val = t;
		freenode->next = *p;
		*p = freenode++;
		n++;
	}
	void report(int *v)
	{	int j = 0;
		for (node *p = head; p != sentinel; p = p->next)
			v[j++] = p->val;
	}
};
}}}

 * 연결 리스트를통해 길이에 제한없이 삽입할 수 있다.
 * insert() 는 재귀적 방법을 통해 삽입
 * insert2() 재귀를 제거하는 방법
  * head다음에 들어가는 경우아 중간에 들어가는 경우의 수 때문에 코드 복잡
 * insert3() 포인터의 포인터를 이용해 코드 중복 제거  
 * IntSetList2 그룹할당을 통해 실행시간 단축 
=== 비교 분석 ===
||'''구조''' || '''10,000'''||'''20,000'''||'''40,000'''||
||배열||0.6||2.6||11.1||
||단순리스트||5.7||31.2||170.9||
||리스트(재귀함수제거)||1.8||12.6||73.8||
||리스트(그룹할당)||1.2||5.7||25.4||
 * 단순리스트인경우 재귀 함수 실행 완료후 순차적으로 처리한 노드의 포인터를 반환 받아 할당하는 코드 때문에 급속 도로 느려짐
 * 재귀 함수를 제거하여도 각 노드마다 메모리를 new 하는 부분때문에 느림
 * 한번에 사용할 메모리를 통체로 할당하여 속도를 개선
 * 배열이 잴 빠른 이유는 메모리 Cache hit가 가장 잘되기 때문
  * 리스트는 메모리를 더 많이 사용
  * 배열은 사용될 메모리 위치 예측가능 vs 리스트는 메모리를 해집고 돌아다녀야함
[생각하는프로그래밍-칼럼13장-소스]
== 방법 3: 이진 탐색 트리 ==
 * 바이너리 트리를 이용하여 입력 및 검색 속도 향상
{{{
class IntSetBST {
private:
	int	n, *v, vn;
	struct node {
		int val;
		node *left, *right;
		node(int v) { val = v; left = right = 0; }
	};
	node *root;
	node *rinsert(node *p, int t)
	{	if (p == 0) {
			p = new node(t);
			n++;
		} else if (t < p->val) {
			p->left = rinsert(p->left, t);
		} else if (t > p->val) {
			p->right = rinsert(p->right, t);
		} // do nothing if p->val == t
		return p;
	}
	void traverse(node *p)
	{	if (p == 0)
			return;
		traverse(p->left);
		v[vn++] = p->val;
		traverse(p->right);
	}
public:
	IntSetBST(int maxelements, int maxval) { root = 0; n = 0; }
	int size() { return n; }
	void insert(int t) { root = rinsert(root, t); }
	void report(int *x) { v = x; vn = 0; traverse(root); }
};
}}}
 * 삽입은 rinsert()를 통해 재귀적으로 처리
 * 출력은 중위 순외(inorder traversal)로 구현(왼쪽처리,자신,오른쪽처리)
 * STL과 비슷한 속도 (트리의 균형을 맞추기위한 연산이 안들어가므로 조금 빠름)
 * 메모리 할당을 한번으로하는 방법을 통해 극적으로 성능 향상(IntSetBST2)

== 방법 4: 비트백터를 이용 ==
{{{
 enum { BITSPERWORD =32,SHIFT =5,MASK = 0x1F };
 int n, hi, *x;
 void set(int i) { x[i>>SHIFT] |= (1<<(i&MASK));}
 void clr(int i) { x[i>>SHIFT] &= (1<<(i&MASK));}
 int test(int i) { return x[i>>SHIFT] & (1<<(i&MASK));}

 IntSetBitVect(maxelements, maxval)
   hi = maxval 
   x = new int[1 + hi/BITSPERWORD]
   for i = [0,hi]
     clr(i)
   n=0

 void report(v)
  j=0
  for i = [0,hi]
    if test(i)
      v[j++] = i

 void insert(t)
  if test(t)
    return
  set(t)
  n++
}}}
 * 최대값 n이 충분히 작아 비트벡터가 메모리에 들어갈수 있는 경우에는 매우 효율적임
 * 단 n이 이 커지는 경우 메모리 사용량이 크게 늘어남 n=2^32 인경우 0.5G가 필요

== 방법 5: 비트 백터 + 리스트 ==
 * 일종의 해시 방법
   1. 버킷이라는 일정한 길이의 공간을 정하고 
   2. 공간별로 들어 갈 수 있는 숫자의 구간 정의
   3. 구간에 속하는 숫자들은 링크드 리스트로 연결

{{{
class IntSetBins {
private:
	int	n, bins, maxval;
	struct node {
		int val;
		node *next;
		node(int v, node *p) { val = v; next = p; }
	};
	node **bin, *sentinel;
	node *rinsert(node *p, int t)
	{	if (p->val < t) {
			p->next = rinsert(p->next, t);
		} else if (p->val > t) {
			p = new node(t, p);
			n++;
		}
		return p;
	}
public:
	IntSetBins(int maxelements, int pmaxval)
	{	bins = maxelements;
		maxval = pmaxval;
		bin = new node*[bins];
		sentinel = new node(maxval, 0);
		for (int i = 0; i < bins; i++)
			bin[i] = sentinel;
		n = 0;
	}
	int size() { return n; }
	void insert(int t)
	{	int i = t / (1 + maxval/bins);  // CHECK !
		bin[i] = rinsert(bin[i], t);
	}
	void report(int *v)
	{	int j = 0;
		for (int i = 0; i < bins; i++)
			for (node *p = bin[i]; p != sentinel; p = p->next)
				v[j++] = p->val;
	}
};

}}}
 * 속도가 링크만 사용했을때보다 빠름
= 원리 = 
 * 문제를 해결하기 위한 STL과 같은일반적인 도구를 찾아보라
  * 특수 목적으로 만든 코드가  일반적인 도구 보다 빠를 수도 있다
 * 코드에서 수행되는 작업량이 줄더라도 메모리 잘못 사용하면 더 느릴 수 있다
  * 배열이 링크드 리스트 보다 빠름
  * 매번 메모리를 할당 요청하는것은 매우 비싼 연산을 계속 하는 것이다.
 * 코드 튜닝 비법
  * 대부분 메모리 할당을 한번으로 줄여서 속도 향상 효과를 크게 봄 
  * 재귀를 루프로 바꾸는 것은 리스트에서는 3배, 빈에서는 10% 향상 (경우마다 다름)
