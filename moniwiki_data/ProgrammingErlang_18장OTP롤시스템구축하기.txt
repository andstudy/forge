18장 OTP롤 시스템 구축하기

목차
1.범용이벤트 핸들러
2.오류로그
3.알람 관리
4.슈퍼비젼트리
5.애플리케이션


1.이벤트 : 일어나는 어떤 것...

	RegProcName ! {evnet. E}	
		RegProcName : 등록된 프로세스 이름
		E : 이벤트
	
	- 이벤드핸들러 API
	event_handler:make(Name)    	: 아무것도 하지 않는 이벤트 핸들러 생성
	event_handler:make(Name, X)		: Name 이라는 이벤트 핸들러로 이벤트 X 전송
	event_handler:make(Name, Fun)	: Name 이라는 이벤트 핸들러에 핸들러 Fun을 추가
	
	ex.1) event_handler.erl 
		
	ex.2)	motor_controller.erl
		event_handler:add_handler(errors, fun controller/1).   
				==> 실행하기 위해서는 errors 라는 이벤드 핸들러를 생성해야한다.
					( event_handler:make(errors). )
					
	오류로그 / 알람처리의 하부 구조는 이벤트 핸들러 패턴을 따른다.
	

2.오류로그
	- 오류 로그를 보는 3가지 관점
		1.프로그래머 관점 : 로그 남기기 위해 플머가 호출하는 함수
		2.구성설정 관점		: 오류로그가 로그 데이터를 저장하는 위치
		3.보고서 관점			: 기록된 오류 어떻게 분석하나
	
	- 오류로그 API
	error_logger:error_msg(String) -> ok
		==> 콘솔로 오류메세지 보냄
	error_logger:error_msg(Format, Data) -> ok    
		==> 인자는 io:format(Format, Data) 와 동일
	error_logger:error_report(Report) -> ok
			
	error_msg 만 사용한다.. -> 추가적인 내용은 메뉴얼 참조...
			ex) error_logger:warning_map().
					error_logger:error_report(Type, Report) -> ok
		
	- 오류로그 설정 방법
		콘솔에서 확인, 파일로 저장, 순환로그로 저장
	
	- 로그 파일 설정 인자를 가지고 얼랭 시작하기
	1.erl -boot start_clean  ==> 인자없이 실행과 동일
	2.erl -boot start_sasl   
		==> 시스템아키텍쳐 지원 라이브러리가 오류 로깅과 부하 방지를 담당
	3.erl -boot start_sasl -config elog1
		==> elog1.config 파일에 기술된 환경에 따라서 로그 출력 및 파일 생성
		* config file : 오류 로그 설정 ( 디렉토리/로그파일 갯수/순환로그yn )
		
	sample) elog1..4.config 파일 
		%% no tty 
		[{sasl, [
		 {sasl_error_logger, false}  ==> 오직 오류만. 진행보고 패스 ===> 오직 쉘로만 출력됨..
		 ...
		 {sasl_error_logger, {file, "/home/joe/error_logs/THELOG"}} ==> 상대경로이용. homepath 에 설정.
		 				==> 해당 파일에 로그 기록..
		 ...
		 {error_logger_mf_dir,"./mslogs4"},   ==> 폴더생성 안됨..ㅡ.ㅡ;
		 ...
		 {errlog_type, error}, ==> 오직 오류만 보고.. ( 정보성 보고 / 진행 보고 패스..)
		]}].	
		
			
	- 오류 분석
	MODULE
		rb 
	MODULE SUMMARY
		The Report Browser Tool 
	DESCRIPTION
		The Report Browser (RB) tool makes it possible to browse and format error reports 
		written by the error logger handler log_mf_h. 

	rb:grep(RegExp)
		Types : RegExp = string()
		
		All reports containing the regular expression RegExp are printed. 		
		RegExp is a string containing the regular expression. 
		Refer to the module regexp in the STDLIB reference manual 
		for a definition of valid regular expressions. 
		They are essentially the same as the UNIX command egrep. 

	rb:start{max, MaxNoOfReports}. 
		: Controls how many reports the rb_server should read on start-up.
	
3. 알람 관리
	- 제네릭 서버는 Mod:init(InitArgs) 호출로 시작한다.
	
	- handle_event(Event, State)
			Event : {EventType, EventArg}  형태의 튜플

4.슈퍼비젼트리
	- 프로세스들의 구조
	- 상위 프로세스는 트리에 있는 하위 프로세스(워커)를 감시하면서 프로세스가 실패할경우 재시작 시킨다.
	
	* 트리 유형
		- 일대일 슈퍼비젼 트리
			어떤 워커가 실패하면 그 프로세스는 슈퍼바이저에 의해 재시작
		- 일대다 슈퍼비젼 트리
			어떤 워커가 죽으면 모든 워커를 죽이고 모두 재시작

	* 슈퍼비젼 함수 형태
	init(...) ->
		{ok, {RestartStrategy, MaxRestart, Time},
			[Worker1, Worker2, Worker3, ...]
		}
		
		- RestartStrategy : 애텀 일대일 / 일대다 가운데 하나
		- MaxRestart, Time : 재 시작 빈도 (Time 내에 MaxRestart 이상을 수행하면 워커를 모두 죽이고 자신도 종료)
		- [{Worker1}..n] : 워커 프로세스를 어떻게 시작할지 기술

		Worker 상세
		{Tag, {Mod, Func, ArgList},
						Restart,
						Shutdown,
						Type,
						[Mod1] }
		- Tag			: 워커프로세스를 참조하는 데 사용할 수 있는 애텀태그
		- {Mod, Func, ArgList} : 슈퍼바이저가 워커를 시작하는 사용할 함수 정
		- Restart : permanent/transient/tempory
		- Shutdown : 중단 최대허용 시간
		- Type : worker/supervisor 프로세스 유형
		- Mod1 : 콜백 모듈의 이름


5.애플리케이션
	
	MODULE
		application 
	MODULE SUMMARY
		Generic OTP application functions 
	DESCRIPTION						
		In OTP, application denotes a component implementing some specific functionality, 
		that can be started and stopped as a unit, and which can be re-used in other systems 
		as well. This module interfaces the application controller, a process started at every 
		Erlang runtime system, and contains functions for controlling applications (for example 
		starting and stopping applications), and functions to access information about
		 applications (for example configuration parameters). 
	
		OTP 시스템에서 Application은 하나의 단위로서 시작하거나 중지 될수 있는 특화된 기능을 가진 
		컴포넌트 이다. 이 모듈은 어플리케이션 컨트롤 간의 작업, 모든 얼랭 시스템 프로세서, 시작/정지
		등의 작업 어플리케이션, 어플리케이션에 관한 정보를 접속하는 기능 등에 관여한다.		
		
		An application is defined by an application specification. 명세서에 정의되어있다.
		The specification is normally located in an application resource file called Application.app, 
		where Application is the name of the application. Refer to app(4) for more information about
		 the application specification. 
	
		This module can also be viewed as a behaviour for an application implemented according to 
		the OTP design principles as a supervision tree. The definition of how to start and stop the 
		tree should be located in an application callback module exporting a pre-defined set of functions. 


	- loaded_applications() -> [{Application, Description, Vsn}]

		Types:
			Application = atom()
			Description = string()
			Vsn = string()

		Returns a list with information about the applications which have been loaded using load/1,2, 
		also included applications. Application is the application name. Description and Vsn are the values 
		of its description and vsn application specification keys, respectively. 



	=* File Types *=
		The following file types are defined in Erlang/OTP: 
	
	=* File Types *=
		
		File Type  									File Name/Extension  		Documented in  
		module  										.erl  									Erlang Reference Manual  
		include file  							.hrl  									Erlang Reference Manual  
		release resource file  			.rel  									rel(4)  
		application resource file  	.app  									app(4)  
		boot script  								.script  								script(4)  
		binary boot script  				.boot  									-  
		configuration file  				.config  								config(4)  
		application upgrade file  	.appup  								appup(4)  
		release upgrade file  			relup  									relup(4)  
		
	
	
