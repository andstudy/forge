 아이디어.
  1. 이미 찾아본 단어에 대해서는 더 이상 찾을 필요가 없다.
  1. 사전순으로 찾아보면 된다.
  1. 가장 높은 값을 유지한다. (DP, 다익스트라)

 그러나 우려했던대로 Time limit exceeded 가 나는군요. 알고리즘을 확 고쳐야 할지, 문자열 쪽 부분을 최적화 해야 하는지 잘 모르겠습니다. 쩝...
  map 이나 set, vector 대신 array 로 바꿔도 안 되네요. 힝... string 도 바꿔야 할까나...

{{{
/* @JUDGE_ID:parkpd 110401 Cpp "test" */

/* @BEGIN_OF_SOURCE_CODE */

#include <iostream>
#include <vector>
#include <set>
#include <string>
#include <strstream>
#include <algorithm>
#include <map>
#include <math.h>

//#define _UNIT_TEST

using namespace std;

namespace ATUtil
{

	bool IsInRange(int value, int from, int to)
	{
		return (from <= value) && (value <= to);
	}

	int ConvertToIndex(char c)
	{
		if ('a' <= c && c <= 'z')
		{
			return c - 'a';
		}
		else
		{
			return -1;
		}
	}

	char ConvertToChar(int i)
	{
		return (char)i + 'a';
	}

	typedef map<int, int> IntDB;
	typedef vector<int> Ints;

};

using namespace ATUtil;

#ifdef _UNIT_TEST

#include "../UnitTest++/src/UnitTest++.h"

int main()
{
	UnitTest::RunAllTests();

	char temp;
	cin >> temp;

	return 0;
}

#endif

// code implement

namespace ATCode
{
	string g_Words[25000];
	int g_Ladder[25000];

	//////////////////////////////////////////////////////////////////////////
	// CEditStepLadder
	class CEditStepLadder
	{
	public:
		CEditStepLadder() : m_Longest(0), m_WordSize(0) {}

		int m_Longest;
		int m_WordSize;

		void Insert(const string& str);
		void Find(size_t from, const string& word);
		int GetLongestEditStepLadder();
	};

	void CEditStepLadder::Insert(const string& str)
	{
		g_Words[m_WordSize] = str;
		g_Ladder[m_WordSize] = 1;
		m_WordSize++;
	}

	void CEditStepLadder::Find(size_t from, const string& word)
	{
		int left = (int)from + 1;	// 나보다 사전순으로 높은 단어부터 검색 시작
		int right = m_WordSize - 1;
		int mid;

		while (left <= right)
		{
			mid = (left + right) / 2;
			int cmp = strcmp(g_Words[mid].c_str(), word.c_str());
			if (0 == cmp)
			{
				// ladder step 이 더 긴 경우에만 업데이트한다.
				int& currentWordStep = g_Ladder[from];
				int& foundWordStep = g_Ladder[mid];
				if ((foundWordStep < currentWordStep + 1))
				{
					foundWordStep = currentWordStep + 1;
					if (m_Longest < foundWordStep)
					{
						m_Longest = foundWordStep;
					}
				}
				break;
			}
			else if (0 < cmp)
			{
				right = mid - 1;
			}
			else
			{
				left = mid + 1;
			}
		}
	}


	int CEditStepLadder::GetLongestEditStepLadder()
	{
		vector<char> letter;
		letter.reserve(26);
		for (char c = 'a'; c <= 'z'; ++c)
		{
			letter.push_back(c);
		}
		const int letterSize = (int)letter.size();

		string originalWord;
		string word;

		for (int it = 0; it < m_WordSize; ++it)
		{
			originalWord = g_Words[it];
			word = originalWord;
			size_t wordSize = word.size();

			// 한 글자가 바뀐 경우
			for (size_t i = 0; i < wordSize; ++i)
			{
				word = originalWord;		// reset
				for (int j = 0; j < letterSize; ++j)
				{
					word[i] = letter[j];
					Find(it, word);
				}
			}

			// 한 글자를 더한 경우.
			// 3 자짜리 글자라면, 글자가 추가될 수 있는 곳은 4 군데다.
			for (size_t i = 0; i <= wordSize; ++i)
			{
				word = originalWord;		// reset
				word.insert(word.begin() + i, ' ');

				for (int j = 0; j < letterSize; ++j)
				{
					word[i] = letter[j];
					Find(it, word);
				}
			}

			// 한 글자를 뺀 경우
			for (size_t i = 0; i < wordSize; ++i)
			{
				word = originalWord;		// reset
				word.erase(i, 1);
				Find(it, word);
			}
		}

		return m_Longest;
	}

	///////////////////////////////////////////////////////////////
	// CConsole
	class CConsole
	{
	public:
		static void ConsoleTest(istream& input, ostream& output);
	};

	void CConsole::ConsoleTest(istream& input, ostream& output)
	{
		CEditStepLadder ladder;
		string word;
		while (input >> word)
		{
			ladder.Insert(word);
		}

		int ret = ladder.GetLongestEditStepLadder();
		output << ret;
	};

}

using namespace ATCode;

#ifndef _UNIT_TEST

int main()
{
	CConsole::ConsoleTest(cin, cout);

	return 0;
}

#else

// tests

struct FixtureConsole
{
	stringstream input;
	stringstream output;
};


TEST_FIXTURE(FixtureConsole, ConsoleTest)
{
	string s = "test";
	string s1 = "test1";
	CHECK(s < s1);

	string s2 = "aest";
	string s3 = "test";
	CHECK(s2 < s3);
}

TEST_FIXTURE(FixtureConsole, ConsoleTest1)
{
	input << 
		"cat\n"
		"dig\n"
		"dog\n"
		"fig\n"
		"fin\n"
		"fine\n"
		"fog\n"
		"log\n"
		"wine\n"
		;
	CConsole::ConsoleTest(input, output);
	CHECK_EQUAL("5", output.str());
}

#endif

/* @END_OF_SOURCE_CODE */
}}}
