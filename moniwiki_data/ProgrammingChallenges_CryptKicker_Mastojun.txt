= 문제풀이 =
 * Back Tracking을 이용하여 전수 검색
  * 종료조건 : 입력된 모든 단어에 대해서 만족하는 쌍을 찾음
  * 입력된 n번째의 단어와 사전에서 길이가 같은 단어를 찾으면
   * 이전에 만족했던 매핑을 위반하지 않으면 매핑 업데이트
   * n+1번째에 대해서 검색
    * 성공시 true리턴
   * 종료하지 않으면 업데이트된 매핑 원래대로 돌려놓기

 * 책에 있는 정답의 방식과 같음 =____=;
 * 책에서는 재귀호출되는 함수마다 매핑되는 값을 새로 할당하고, 업데이트 한느 방식
  * 메모리 낭비, 속도 저하.. 라고 생각했으나 PC에서는 오히려 더 빠름; UVa에서는 더 느리게 나옴.

= 어려웠던점 =
 * 매핑을 원래대로 돌려놓는 부분을 잘못 생각해서 몇주일간 고생함 ㅠㅠ
  * 처음엔 Re1, Re2로 나누지 않고 하나로만 생각했었음.
 * PC의 테스트 입력파일을 소켓프로그래밍으로 빼와서 디버깅함 ㅠㅠ..

= 소스 =
{{{#!gcode cpp
#include <stdio.h>
#include <string.h>

char Dictionary[1001][20];
char InputString[100];
char DivideString[50][81];

char Crypt[27];
char Encrypt[27];

int n, len, nInput;

void Input()
{
	scanf("%d", &n);
	for(int i = 0; i < n; i++ )
	{
		scanf("%s", Dictionary[i]);
	}
}

bool CryptWord(int index)
{
	int Re1 = 0, Re2 = 0;
	int i, j;
	if( index >= nInput) return true;

	for(i = 0; i < n; i++ )
	{
		if( strlen( DivideString[index]) == strlen(Dictionary[i]) )
		{
			Re1 = 0;
			Re2 = 0;

			for(j = 0; DivideString[index][j]; j++ )
			{
				if( (Crypt[DivideString[index][j]-'a']
				&&  Crypt[DivideString[index][j]-'a'] != Dictionary[i][j])
					|| ( Encrypt[Dictionary[i][j]-'a']
				&& Encrypt[Dictionary[i][j]-'a'] != DivideString[index][j]))
				{
					break;
				}
				else if( Crypt[DivideString[index][j]-'a'] == 0 )
				{
					Re1 |= (1 << (DivideString[index][j]-'a'));
					Re2 |= (1 << (Dictionary[i][j]-'a'));
					Crypt[DivideString[index][j]-'a'] = Dictionary[i][j];
					Encrypt[Dictionary[i][j]-'a'] = DivideString[index][j];					
				}
			}
		
			if( DivideString[index][j] == 0 && CryptWord(index+1) ) return true;

			for(j = 0; DivideString[index][j]; j++ )
			{
				if( Re1 & (1 << (DivideString[index][j]-'a')) && Re2 & (1 << (Dictionary[i][j]-'a')))
				{
					Crypt[DivideString[index][j]-'a'] = 0;
 					Encrypt[Dictionary[i][j]-'a'] = 0;
				}
			}
		}
	}

	return false;
}

void DivideStringFunction()
{
	int iWord = 0, iLetter = 0;

	for(int i = 0; InputString[i]; i++ )
	{
		if( InputString[i] == ' ' && iLetter != 0)
		{
			DivideString[iWord][iLetter] = 0;
			iLetter = 0;
			iWord++;
		}
		else if( InputString[i] != ' ')
		{
			DivideString[iWord][iLetter] = InputString[i];
			iLetter++;
		}
	}

	if( iLetter )
	{
		DivideString[iWord][iLetter] = 0;
		iLetter = 0;
		iWord++;
	}

	nInput = iWord;

	for( int i = 0; i <= 26; i++ )
	{
		Crypt[i] = 0;
		Encrypt[i] = 0;
	}
}

int main()
{
	Input();

	gets(InputString);


	while( gets(InputString) && *InputString != EOF )
	{
		len = (int)strlen(InputString);
		DivideStringFunction();

		if( CryptWord(0) )
		{
			for(int i = 0; i < len ;i++ )
			{
				if( InputString[i] == ' ' ) putchar(' ');
				else						putchar(Crypt[InputString[i]-'a']);
			}
		}
		else
		{
			for(int i = 0; i < len; i++ )
			{
				if( InputString[i] != ' ')  putchar('*');
				else						putchar(' ');
			}
		}
		putchar('\n');
	}

	return 0;
}
}}}
