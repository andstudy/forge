[xUnitTestPatterns] 상위로 가기
이름을 써 주세요. [ParkPD]

= xUnit 테스트 패턴 베타리딩 =
 * [wiki:/Tips 전체 검토]

 타이핑하기 너무 귀찮네요. 전화, 음성채팅이나 만나서 합시다
  -> 1주일 남았습니다. 전체적으로 오역은 없는지도 살펴봐 주세요. [ParkPD]

== 2장 ==
=== 과감히 살빼기 ===
 1. '1장. 간단하게 둘러보기'에서는 이 책에서 다루는 핵심 패턴과 (11페이지)
  * '1장. 간단히 둘러보기'에서 핵심 패턴과
 1. 이런 이유는 근복 원인이 여러 증상 ~ 때문이다 (12페이지)
  * 근본 원인이 여러 증상 ~ 때문이다
  * "때문이다"가 있어서 "이런 이유는" 생략 가능
 1. 모든 문제가 냄새라고 볼 수는 없고, (12페이지)
  * 모든 문제가 다 냄새는 아니며,
 1. 하지만 이들 냄새의 이름은 대부분 (12페이지)
  * 하지만 냄새 이름은 대부분
 1. 기록된 코드를 유지해야 하는 경우에 특히 적합하다 (13페이지)
  * 코드 기록을 유지해야 할 때 더욱 좋다
 1. 최근에 나는 제3의 발견했다 (13페이지)
  * 최근 나는 세번째 냄새를 찾았다
 1. 이런 프로젝트 냄새는 (13페이지)
  * 프로젝트 냄새는
 1. 어떤 냄새는 완전히 제거할 수가 없는데, 그러기에는 너무 많은 노력이 필요하기 때문이다 (13페이지)
  * 어떤 냄새는 완전히 없애기가 너무 어렵다
 1. 중요한 것은 어떤 냄새가 있는지 알고, 어떤 것이 그런 냄새를 풍기게 만드는지를 아는 것이다 (13페이지)
  * 어떤 냄새가 나고, 왜 냄새가 나는지 반드시 알아야 한다
 1. 그러고 나서야 프로젝트를 효율적으로 유지하기 위해 어떻게 대처해야 할지를 신중하게 결정할 수 있다 (13페이지)
  * 그래야 어떻게 대처할지 조심스레 결정한 다음, 프로젝트를 효율적으로 유지할 수 있다
 1. 어떤 냄새를 제거할 것인지 결정할 때에는 (13페이지)
  * 어떤 냄새를 없애기로 마음먹을 때는
 1. 여러 종류의 냄새를 살펴볼 때 중요한 것은 냄새와 동시에 그 냄새의 증상도 같이 살펴본다는 점이다 (14페이지)
  * 여러가지 냄새를 살필때는 냄새뿐만 아니라 냄새의 증상도 같이 살펴야 한다는 사실을 명심하자
 1. 그 원인은 동작 냄새로도 나타날 수 있고, 궁금적으로는 거의 언제나 그 문제의 근원이 되는 코드 냄새가 아래에 깔려 있게 된다 (14페이지)
  * 원인은 동작 냄새로 나타날 수도 있지만, 대부분 밑바닥에서 풍기는 코드 냄새가 근본 원인일 때가 많다
 1. 지금부터는 프로젝트에서 쉽게 만날 수 있는 테스트와 관련된 냄새 (14페이지)
  * 지금부터 프로젝트를 진행할때 자주 만나는 테스트 관련 냄새
 1. 냄새들을 소개하는 데 중점을 두기로 한다 (14페이지)
  * 냄새 소개에 중점을 둔다
 1. 냄새의 원인들과 (14페이지)
  * 냄새 원인와
 1. 프로젝트 냄새는 프로젝트에서 뭔가가 잘못돼가고 있을 때 맡을 수 있는 현상이다 (14페이지)
  * 프로젝트에서 뭔가 잘못됐을 때 나는 냄새가 프로젝트 냄새다
 1. 이런 현상의 근본 원인에는 대부분 하나 이상의 코드 냄새나 동작 냄새가 있다 (14페이지)
  * 대부분 코드 냄새나 동작 냄새들이 근본 원인이다
 1. 프로젝트 냄새를 통해 관리자는 테스트 자동화가 완벽함에서 멀어지고 있다는 사실을 알 수 있는 힌트를 얻을 수 있다 (15페이지)
  * 프로젝트 냄새를 맡고서 테스트 자동화가 완벽에서 멀어진다는 힌트를 얻는다
 1. 프로젝트 관리자가 냄새를 맡을 수 있는 가장 명확한 지표로 정규 테스트나 사용자/고객 테스트에서 발견되는 결함의 수로 측정하는 소프트웨어의 품질을 들 수 있다 (15페이지)
  * 프로젝트 관리자가 냄새를 맡을 때, 정규 테스트나 사용자/고객 테스트에서 나오는 결함 갯수가 가장 알기 쉬운 표시다
 1. 이 문제를 당장 해결하지 않는다면 (15페이지)
  * 당장 해결하지 않으면
 1. 자주 수정해줘야 한다든지 (15페이지)
  * 자주 수정해야 한다든지
 1. 테스트 변경 비용이 너무 많이 든다든지 하면 (15페이지)
  * 테스트 변경 비용이 너무 비싸면,
 1. "테스트 만든다고 시간 낭비하지 마라"로 (16페이지)
  * "테스트 만든다고 시간 낭비하지 마라"고
 1. 테스트하기 어려운 설계나 여린 테스트가 되게 만드는 테스트 환경도 원인일 수 있다 (16페이지)
  * 테스트 환경 때문에 여린 테스트가 되거나 테스트하기 힘든 설계가 나오기도 한다
 1. 테스트 실패의 형태로 나타나므로 특별히 맡으려고 노력하지 않아도 알 수 있다 - 16
  * 테스트 실패로 나타나므로 특별히 노력하지 않아도 맡을 수 있다
 1. 사람이 생각하기에는 테스트에 - 16
  * 사람이 생각하기에 테스트에
 1. 중요한 점은 뭔가 하나를 바꿨을 때에 최대 몇개의 테스트만 깨져야 한다는 점이다 - 17
  * 뭔가 하나를 바꿀 때 반드시 일부 테스트 몇개만 깨져야 한다는 사실이 중요하다
 1. 굉장히 많은, 심지어 대부분의 테스트가 깨진다면 문제가 있다 - 17
  * 테스트가 아주 많이, 심지어 대부분 깨진다면 문제다
 1. 어렵게 만드는데, 그 이유는 실패 로그에 - 17
  * 어렵게 만드는데, 실패 로그에
 1. 테스트에서 실패가 발생했을 때 - 18
  * 테스트가 실패했을 때
 1. 분명하게 보여줘 - 18
  * 분명하게 밝혀
 1. 쓰지 않아도 되게 해줘야 한다 - 18
  * 쓰지 않도록 해야 한다
 1. 조짐을 보여준다 - 18
  * 조짐이다
 1. 이러면 이전에 테스트를 실행한 이후로 소프트웨어에 - 18
  * 이러면 마지막으로 테스트를 실행한 이후 소프트웨어에
 1. 이렇게 피드백이 미뤄지면 - 19
  * 피드백이 미뤄지면
 1. 해결하는 용도로 가장 자주 사용되는 해결책이 공유 픽스처인데, 이것 역시 - 19
  * 해결하는 가장 흔한 해결책인 공유 픽스처 또한
 1. 다양하지만 결과는 같다 - 19
  * 다양하지만 결과는 하나다
 1. 즉, 애매한 테스트는 - 19
  * 모호한 테스트는 (즉 삭제)
 1. 관리해야 할 테스트 코드가 많아지는 데다 이런 코드들이 어느새 ~ 되기 쉬우므로 관리가 어렵다 - 20
  * 관리 할 테스트 코드가 많아지고, 어느새 ~ 되기 쉬워, 관리가 어렵다
 1. 재사용할 수 있게 해줘야 한다 - 20
  * 재사용 해야 한다

=== 수동태 ===
 1. 코드 냄새는 켄트 벡과 같이 쓴 '3장. 코드 속의 나쁜 냄새'에 잘 설명돼 있다 (11페이지)
  * 켄트 벡과 같이 쓴 '3장, 코드 속 나쁜 냄새'에서 코드 냄새를 잘 설명했다
 1. 리팩토링에서의 코드 냄새는 제품 코드에서 발견되는 문제에 주로 집중한다 (11페이지)
  * 리팩토링할때 집중하는 냄새는 제품 코드에서 풍기는 코드 냄새다
 1. 먼저 발견돼야 하고, (13페이지)
  * 먼저 찾아야 하고,
 1. 자동화 하는데 사용되는 - 16
  * 자동화 할때 사용하는
 1. 비용이 늘어나 좋은 테스트 커버리지를 포기하게 된다 - 17
  * 비용이 늘어나, 높은(?) 테스트 커버리지를 포기하기 쉽다
 1. 여기에는 ~ 최근의 코드를 컴파일하고 이렇게 새로 컴파일된 빌드에서 ~ 단계가 포함돼 있다 - 17
  * 여기에 ~ 최근의 코드를 컴파일하고, 새로 컴파일한 빌드에서 ~ 단계를 집어 넣는다
  
=== 명사 주어 ===
 1. 여러 '나쁜 냄새'를 보여줌으로써 이런 의심을 확인시켜 줬다 (12페이지)
  * (여러 '나쁜 냄새'를 보면서 확신을 가졌다)
  * (발표하여 나의 확신을 다른 이들에게 알렸다 ??)
 1. 반대로 동작 냄새는 결정적인 순간에 테스트를 실패시키거나 아예 컴파일이 안 되게 하기 때문에(13페이지)
  * 반대로 동작 냄새가 나면 결정적인 순간에 테스트가 실패하거나 아예 컴파일이 안 되기 때문에
 1. 이런 냄새로 인해 생기는 문제들이 성공으로부터 멀어지게 만들기 때문에 (13페이지)
  * 이런 냄새가 나면 문제 해결이 힘들기 때문에
 1. 여린 테스트 문제는 여러 세대에 거쳐 테스트 자동화에 오명을 씌웠는데 - 16
  * 오랜 시간동안 테스트를 자동화할때 가장 해결하기 힘든 문제는 여린 테스트였는데
 1. 이런 모호함은 ~ 테스트를 잘못 고치게 해 버그 투성이 테스트를 만들어 내게 한다 - 19
  * 이런 모호함 때문에 ~ 테스트를 잘못 고쳐, 테스트를 버그 투성이로 만든다

=== 어색한 문장 ===
 1. 이 책에 수록된 냄새 대부분은 이름 지어진 원인이 하나 이상이다 (12페이지)
  * (냄새가 나는 이유는 여러가지다)
 1. 이런 경우에는 좀 더 일반적이지만 맡을 수 있는 냄새보다는 원인을 찾아보는게 더 낫다 (12페이지)
  * (님이 하셈)
 1. 여러 해 동안 최소 둘 이상 다른 종류의 냄새들을 발견했다 (12페이지)
  * 몇년간 냄새 종류를 최소 두 가지 이상으로 구분짓게 됐다
 1. 하나는 코드 냄새로 코드를 살펴볼 때 찾을 수 있는 냄새고, 또 하나는 동작 냄새로 테스트를 실행한 결과에 영향을 미치는 냄새다 (12페이지)
  * 하나는 코드를 살필때 풍기는 코드 냄새고, 다른 하나는 테스트 실행 결과에 영향을 주는 동작 냄새다
 1. 이런 코드는 그냥 문제가 있어 보이거나 의도가 분명하게 드러나지 않는다 (13페이지)
  * 의도가 분명히 드러나지 않거나 뭔가 문제가 보이는듯한 코드다
 1. 일반적으로 제대로 된 테스트 자동화 전략을 선택하고 (13페이지)
  * 일반적으로 테스트 자동화 전략을 제대로 선택하고
 1. 훨씬 일반적인 문제 (15페이지)
  * (꽤나 자주 만나는 문제 ???)
 1. 동작 냄새는 테스트를 컴파일하거나 실행할 때 맡을 수 있다 - 16
  * 테스트를 컴파일하거나 실행할 때 나는 냄새가 동작 냄새다
 1. 가장 일반적인 동작 냄새는 - 16
  * 가장 흔한 동작 냄새는
 1. 이것은 한 번 통과한 테스트가 - 16
  * 여린 테스트는 한번 통과한 테스트가
 1. 테스트 툴이 약속과는 달리 쉽게 테스트 자동화를 할 수 없었을 때가 그랬다 - 16
  * 테스트 툴이 약속과 달리 테스트 자동화를 쉽게 해내지 못했을 때가 가장 큰 문제였다
 1. 중복은 ~ 할 때 발생한다 - 20
  * ~ 할 때 중복이 발생한다
 1. 테스트 로직(217 페이지)는 - 20
  * 테스트 로직(217 페이지)은
 
== 1장 ==
=== 과감히 살빼기 ===
 1. 빌드가 너무 느려지는 경우에는 고객 테스트를 체크인 빌드에서는 제외하고 (5페이지)
  * 빌드가 너무 느리면 고객 테스트를 체크인 빌드에서 빼고
 1. 고객이 시스템에서 해주기는 기대하는 (5페이지)
  * 고객이 시스템에서 기대하는
 1. 단일 조건 테스트가 되게 한다 (6페이지)
  * 단일 조건 테스트로 만든다
 1. 테스트가 쉽게 이해될 수 있게 한다 (7페이지)
  * 테스트를 알기 쉽게 만든다

=== 어색한 문장 ===
 1. 테스트 도중 실패했을 때 좋은 결함 국소화 (6페이지)
  * (님이 하셈)
  * (결함 범위가 커져 테스트가 실패했을때 고치기 힘들다 ???)
 1. 시작할 때마다 설치하게 한다 (6페이지)
  * 시작할 때마다 설치한다
 1. 이것은 테스트 냄새가 나는 서로 반응하는 테스트가 변장한 (6페이지)
  * 상호반응테스트가 몰래 모습을 바꿔 냄새를 풍기는 모습이다.
 1. 효과적으로 단위 테스트를 하려면 모든 테스트가 클래스의 퍼블릭 인터페이스로 왕복 테스트를 하는 완전 자동 테스트여야 한다 (6페이지)
  * 효과적으로 단위 테스트를 하려면, 모든 테스트가 클래스의 퍼블릭 인터페이스로 왕복 테스트를 하도록, 완전히 자동화 해야한다
 1. 이렇게 만들어진 테스트케이스 클래스들을 위한 테스트 스위트 객체를 하나로 모아 (8페이지)
  * (대충 다음 처럼)
  * 테스트 스위트 객체를 하나로 모아 묵시적 설치로 테스트케이스 클래스를 만들고

=== 수동태 ===
 1. 잘 작성된 문서로서의 테스트를 통해 시스템이 어떻게 (6페이지)
  * 테스트가 문서 역할을 하도록 잘 만들어 시스템이 어떻게
 1. 서비스 파사드는 모든 비즈니스 ~ 프레젠테이션 레이어에서 사용된다 (6페이지)
  * 서비스 파사드는 프레젠테이션 레이어에서 사용하며, 모든 비즈니스 ~ 캡슐화한다.
