= 코드 최적화 전략 = 
 * 성능의 개요
  * 품질의 특성과 성능
  * 성능은 코드의 속도와는 약간의 관련만있다.
 * 코드 수준이전에 생각해볼 관점들
  * 프로그램 요구사항
  * 프로그램 설계
  * 클래스와 루틴 설계
  * 운영체제 상호작용
  * 코드 컴파일 
  * 하드웨어
  * 코드 최적화
 * 최적화대 대한 소개
  * 페레토 법칙 :20%노력으로 80%결과를 얻을 수 있다
  * 코드 20%의 루틴이 실행시간 80%을 차지
  * 가장 많이 사용되는 부분을 찾아 최적화 하려 노력하자
 * 코드 최적화에 대한 오해
  * 고급 언어에서 코드를 줄이면 결과적으로 기계어 코드의 속도와 크기를 향상시킨다-거짓!(p816)
  * 어떤 연산은 아마도 다른 것보다 빠르거나 작을 것이다- 거짓!
  * 코드를 작성하면서 최적화해야 한다- 거짓
  * 빠른 프로그램은 정확한 프로그램만큼 중요하다 – 거짓!
 * 최적화 시기
  * 일단 잘만들어라 (고급설계를 사용,모듈화,변경이 쉽게)
  * 성능을 검사하라
  * 최적화가 필요하다는 걸 알 때까지 하지 않는다.
 * 컴파일러 최적화(p.822)
  * 컴파일러의 약단을 파악
  * 코드는 직관적으로 -> 컴파일러가 쉽게 최적화 할 수 있도록
 * 느리고 비대한 부분들
  * 공통적이 원인
   * 입출력 연산(메모리,파일,네트워크)(p823)
   * 페이징(p828)
   * 시스템 호출
   * 인터프리티언어(p826)
   * 오류(디버깅코드,메모리할당해지잊음,부적잘한데이터베이스설계,부적절한장치탐색)
  * 공통적인 연산의 상대적인 성능비용
   * 어떤 연산이 다른 연산보다 비쌀 건지는 측정해보자(p827)
 * 측정
   * 경험은 최적하에 도움이 되지않는다.(경험을 준 환경이 변하면 필요없게된다)
   * 명확한코드vs최적화코드(p830)
   * 프로파일도구등을 사용 하거나 경과된 루틴등을 기록하는 것들을 사용
  * 반복
   * 원하는 만큼 성능개선을 위해서는 여러 번 반복해야 한다(p833)
   * 코드최적화를 통해 코드 품질은 떨어짐
  * 초기 코드 작성시 성능 작업을 준비하는 좋은 방법은 이해하고 수정하기 쉬운 코드를 작성하는것
