내가 프로그래밍 심리학을 읽고 달라진 점

== 매주 화요일마다 전체 프로젝트 코드리뷰 하기 ==
 * 코드 리뷰 하는 법
  * Arixis Merge 를 구매한다
  * 현재 코드의 snapshot 을 로컬에 저장한다
  * 저번 주에 저장한 코드 snapshot 을 현재 코드와 폴더 비교한다
  * 하나다 쭉 훑어보면서 이상한 게 있으면 담당자에게 물어본다

== 내성법으로 찾은 디버깅 Tip ==
 * 서버에서 Crash 가 났을 때, 나는 못 찾은 버그를 다른 사람이 찾으면, 그 사람은 어떻게 그 버그를 찾았는지 물어본다
 * 혹은 내가 가장 먼저 Crash 의 원인을 찾았을 때도, 어떻게 버그를 찾을 수 있었는가를 스스로에게 물어보고 이를 정리한다

== 내성법으로 찾은 디버깅 ==
=== 찾기 ===
 * 도저히 모르겠다고 생각될 때 1시간만 더 보자. 거의 다 왔을 수 있다.
 * 내가 고친 코드를 먼저 의심하자.
 * 잘 모르겠거든, 다른 사람에게 물어보자. 특히 내가 만든 코드는, 너무 익숙해서 뻔한 버그도 찾기 어렵다.
 * 갑자기 이상해졌다면, 가장 최근에 고친 파일부터 차례대로 찾아보자
 * 문제가 될만한 코드를 짰을 당시의 심리상태를 생각해보자.
  * 이직을 준비하던 사람이 짠 코드인가?
  * copy & paste 를 했다면, 원본 코드와 비교해서 다른 곳이 어디인지 검사해 보자(SmartPointer 버그 찾은 방법)
=== 현상 ===
 * 현상은 원인이 있기 때문에 나타난다. 쉽게 재현 안 된다고 무시하지 말자.
 * 이상현상이 생긴 시간대를 확인하고, 그 앞뒤의 에러로그를 전체적으로 확인해 보자. 생각외의 힌트를 얻을 수 있다.
=== 재현 ===
 * 무조건 재현해 봐라. 재현이 불가능하면, 예상되는 재현이라도 해 봐라. 재현 할 때는 BP 걸어놓고 한 step 씩 이동하면서 코드를 확인해 보자
 * 재현을 할 때는 문제가 되는 현상을 데이터 하나까지 똑같이 만들어 해보자. 뭔가를 찾을 수도 있다.
 * 고친 게 하나도 없다고 해도, 환경이 바뀌면 버그가 생길 수 있다. 설정 파일이 바뀌었는지, 다른 쪽에서 접속이 들어왔는지 등을 확인해라.
 * 뭐가 안 된다는 얘기가 나오면, 정말 그런지 직접 확인해라. 버그를 발견한 사람이 잘 못 얘기해 주거나, 이해를 못 하고 있을 수도 있고, 근처에서 다른 해결책을 발견할 수도 있다. (해외 지사에서 보낸 버그 리포트는 특히 이런 일이 더 심하다)
 * 버그 report 를 그대로 믿지 마라. QA 도 잘 모르는 상태에서 아는 만큼만 써 놨을 수 있다. 직접 설정파일을 확인하고, 재현을 해 봐라.

== 버그를 만든 원인이 나였을 경우, 오히려 '미안, 그거 내가 만든거네.' 이라고 크게 얘기한다 ==
 * 버그를 만들지 않도록 주의해야 하지만, 어짜피 버그를 안 만드는 프로그래머는 (적어도 내 주위에는) 없다.
 * 버그를 만든 사람을 죄인 취급하는 분위기가 생겨버리면 버그를 만들까봐 무서워서 기획자에게 무조건 '그거 할 수 없어요' 라고 얘기하거나, 코드를 copy & paste 할 수 있다.
 * 정직할 수 있는 팀 분위기를 만들어, 내가 한 실수를 통해 다른 사람도 배울 수 있게 하고, 진취적인 팀을 만들고 싶다.
