== Exercise 2.18. reverse ==
{{{#!gcode
(define (reverse-new param)
  (define (reverse-iter n o)
    (if (null? o)
        n
        (reverse-iter (cons (car o) n) (cdr o))))
  (reverse-iter (list) param))

(reverse-new (list 1 4 9 16 25))
}}}

== Exercise 2.20. same-parity ==
{{{#!gcode
(define (same-parity x . z)
  (define (iter n o)
    (if (null? o)
        (reverse n)
        (if (equal? (even? x)
                    (even? (car o)))
            (iter (cons (car o) n) (cdr o))
            (iter n (cdr o)))))
  (iter (list x) z))

(same-parity 1 2 3 4 5 6 7)
(same-parity 2 3 4 5 6 7)
}}}

== Exercise 2.23. for-each ==
{{{#!gcode
(define (for-each2 proc items)
  (if (null? items)
      (newline)
      (and (proc (car items)) (for-each2 proc (cdr items))) ))

(for-each2 (lambda (x) (newline) (display x))
           (list 57 321 88))
}}}

== Exercise 2.25 ==
{{{#!gcode
(car (cdr (car (cdr (cdr (list 1 3 (list 5 7) 9))))))
(car (car (list (list 7))))
(car (cdr 
      (car (cdr 
            (car (cdr 
                  (car (cdr 
                        (car (cdr 
                              (car (cdr 
                                    (list 1 (list 2 (list 3 (list 4 (list 5 (list 6 7))))))))))))))))))
}}}

== Exercise 2.27 ==
{{{#!gcode
(define (deep-reverse items)
  (define (iter n o)
    (cond ((null? o) n)
          (else (iter (cons (if (pair? (car o))
                                (iter (list) (car o))
                                (car o))
                            n)
                      (cdr o)))))
  (iter (list) items))

(define x (list (list 1 2) (list 3 4)))
(deep-reverse x)
}}}

== Exercise 2.28 ==
{{{#!gcode
(define (fringe x)
  (cond ((null? x) (list))
        ((not (pair? x)) (list x))
        (else (append (fringe (car x))
                      (fringe (cdr x))))))

(define x (list (list 1 2 ) (list 3 4 )))
(fringe x)
(fringe (list x x))
}}}

== Exercise 2.30 ==
{{{#!gcode
(define (square-tree x)
  (cond ((null? x) (list))
        ((not (pair? x)) (* x x))
        (else (cons (square-tree (car x))
                    (square-tree (cdr x))))))

(define (square-tree2 x)
  (map (lambda (sub-tree)
         (if (pair? sub-tree)
             (square-tree2 sub-tree)
             (* sub-tree sub-tree)))
       x))

(define x
 (list 1
       (list 2 (list 3 4) 5)
       (list 6 7)))
(square-tree x)
(square-tree2 x)
}}}
