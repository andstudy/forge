== 1 장 ==
=== 연습문제 1.3 ===
{{{#!gcode scheme
(define (square x) (* x x))
(define (square-sum x y) (+ (square x) (square y)))

(define (prac1-3 a b c) (cond
                          ((and (< a b) (< a c)) (square-sum b c))
                          ((< b c) (square-sum a c))
                          (true (square-sum a b))))
(square-sum 3 4)
(prac1-3 3 2 1)
}}}

=== 연습문제 1.7 ===
여러가지 이유로 실행이 안 됨. 왜?
{{{#!gcode scheme
(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x)
                 x)))

(define (improve guess x)
  (average guess (/ x guess)))

(define (average x y)
  (/ (+ x y) 2))

(define (good-enough? guess x)
  (< (abs (- (sqrt guess) x)) 0.001))

(define (sqrt x)
  (sqrt-iter 1.0 x))

(sqrt 9)
}}}

=== 연습문제 1.29 ===
작동하지 않음. 김명관님 답이 정확해 보이네요 :)
{{{#!gcode scheme
(define (simp-rule f a b)
  (define (next-head-y i n)
    (if (or (= i 0) (= i n))
        1
        (if (even? i) 
            2 
            4)))
  (define (simp-rule-imp f a b i n)
    (define h (/ (- b a) n))
    (define (y k) (f (+ a (* k h))))
    (if (> i n)
        0
        (+ (* (/ h 3) (* (next-head-y i n) (y i))))))
  (simp-rule-imp f a b 0 100))

(define (cube x) (* x x x))

(simp-rule cube 0 1)
;1/75000000
}}}

=== 연습문제 1.30 ===
{{{#!gcode scheme
(define (sum term a next b)
 (define (iter a result)
  (if (> a b)
   result
   (iter (next a) (+ result (term a))))
 (iter a 0))
}}}

=== 연습문제 1.31 ===
{{{#!gcode scheme
(define (trunc-x x) (quotient x 2))
(define (sum-a a)
    (/ (* (trunc-x (+ a 2)) 2) (+ 1 (* (trunc-x (+ a 1)) 2))))
   
(define (mul-sum term a next b)
 (if (> a b)
  1
  (* (term a)
   (mul-sum term (next a) next b))))
   
(define (inc n) (+ n 1))

(define (prod a b)
 (mul-sum sum-a a inc b))

(define (get-pi n)
    (* 4 (prod 1 n)))
}}}

=== 연습문제 1.32 ===
{{{#!gcode scheme
(define (accumulate combiner null-value term a next b)
  (if (> a b)
      null-value
      (combiner (term a)
                (accumulate combiner null-value term (next a) next b))))
                
(define (sum term a next b)
  (accumulate + 0 term a next b))
  
(define (integral f a b dx)
  (define (add-dx x) (+ x dx))
  (* (sum f (+ a (/ dx 2.0)) add-dx b) dx))

(define (cube x) (* x x x))
(integral cube 0 1 0.01)
}}}

=== 연습문제 1.33 ===
{{{#!gcode scheme
(define (filtered-accumulate combiner predicate null-value term a next b)
  (if (> a b)
      null-value
      (if (predicate a)
      	(combiner (term a)
                (filtered-accumulate combiner predicate null-value term (next a) next b))
        null-value)))

(define (sum term a next b)
  (define (filter x) true)
  (filtered-accumulate + filter 0 term a next b))
  
(define (integral f a b dx)
  (define (add-dx x) (+ x dx))
  (* (sum f (+ a (/ dx 2.0)) add-dx b) dx))

(define (cube x) (* x x x))
(integral cube 0 1 0.01)

(define (prime-sum a b)
  (define (next x) (+ x 1))
  (filtered-accumulate + prime? 0 square a next b))

(prime-sum 1 5)
}}}

=== 연습문제 1.34 ===
{{{#!gcode scheme
(define (f g)
 (g 2))

(f square)
(f (lambda (z) (* z (+ z 1))))

(f f) -> (f 2) -> (2 2) 가 되어 해석을 하지 못한다
}}}

=== 연습문제 1.37 ===
{{{#!gcode scheme
(define (cont-frac n d k)
  (define (cont-frac-imp n d i k)
    (if (> i k)
        0
        (/ (n i) (+ (d i) (cont-frac-imp n d (+ i 1) k)))))
  (cont-frac-imp n d 1 k))

(cont-frac (lambda (i) 1.0)
           (lambda (i) 1.0)
           100)
}}}

=== 연습문제 1.38 ===
{{{#!gcode scheme
(define (cont-frac n d k)
  (define (cont-frac-imp n d i k)
    (if (> i k)
        0
        (/ (n i) (+ (d i) (cont-frac-imp n d (+ i 1) k)))))
  (cont-frac-imp n d 1 k))

(define (find-k pred)
  (define (find i)
    (if (pred i) i (find (+ i 1))))
  (find 1))

(define (d i)
  (cond ((= i 2) 2.0)
        ((= (remainder (- i 2) 3) 0)
         (+ 2.0 (* (quotient (- i 2) 3) 2)))
        (else 1.0)))

(define (base-of-natural-log? k)
  (> 0.00001
     (abs (- 2.718281828459
             (+ 2
                (cont-frac (lambda (i) 1.0) d k))))))

(find-k base-of-natural-log?)
;8
(+ 2 (cont-frac (lambda (i) 1.0) d 8))
;2.718279569892473
}}}
[http://palabras.egloos.com/4364855 출처]

=== 연습문제 1.39 ===
{{{#!gcode scheme
(define (cont-frac n d k)
  (define (cont-frac-imp n d i k)
    (if (> i k)
        0
        (/ (n i) (+ (d i) (cont-frac-imp n d (+ i 1) k)))))
  (cont-frac-imp n d 1 k))

(define (tan-cf x k)
  (define (n i)
    (if (= i 1)
        x
        (- (* x x))))
  (cont-frac n (lambda (k) (- (* k 2.0) 1)) k))

(define (tan-cf1 x k)
  (define (n i)
    (if (= i 1)
        x
        (- (* x x))))
  (define (d i)
    (- (* i 2.0) 1))
  (cont-frac n d k))
             
(tan 1)
;1.5574077246549023
(tan-cf 1 20)
;1.557407724654902
(tan-cf1 1 20)
;1.557407724654902
(tan 3.14)
;-0.001592654936407223
(tan-cf 3.14 20)
;-0.0015926549364072742
(tan-cf1 3.14 20)
;-0.0015926549364072742
}}}
[http://palabras.egloos.com/4364898 출처]

=== 연습문제 1.40 ===
{{{#!gcode scheme
(define (cubic a b c)
  (lambda (x)
    (+ (* x x x) (* a x x) (* b x) c)))
}}}
   
=== 연습문제 1.41 ===
{{{#!gcode scheme
(define (double g)
  (lambda (x) (g (g x))))
(define (inc x)
  (+ x 1))
((double inc) 4)

(((double (double double)) inc) 5)
}}}

=== 연습문제 1.42 ===
{{{#!gcode scheme
(define (compose1 a b)
  (lambda (x) (a (b x))))
}}}

=== 연습문제 1.43 ===
{{{
(define (repeated f n)
  (if (= n 1)
      f
      (compose f (repeated f (- n 1)))))

((repeated square 2) 5)
;625

(define (repeated-iter f n)
  (define (iter result n)
    (if (= n 1)
        result
        (iter (compose f result) (- n 1))))
  (iter f n))
}}}
[http://palabras.egloos.com/4406672 출처]
