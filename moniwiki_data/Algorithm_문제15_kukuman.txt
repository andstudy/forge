소스가 나눠져 있습니다 .UVA submit 포기 ㅋ
 * Judge.java
{{{
public class Judge{
		private int contestant;
		private int problem;
		private int time;
		private String status;
		
		public Judge(int contestant , int problem , int time , String status){
			this.contestant = contestant;
			this.problem = problem;
			this.time = time;
			this.status = status;
		}

		public int getContestant() {
			return contestant;
		}

		public int getProblem() {
			return problem;
		}

		public String getStatus() {
			return status;
		}

		public int getTime() {
			return time;
		}
}}}}

* SolveResult.java
{{{
import java.util.HashSet;
import java.util.Set;


public class SolveResult implements Comparable<SolveResult>{
	private int contestant;
	private int problemTotal = 0;
	private int totalTime = 0;
	private Set<Integer> solvedProblemSet = new HashSet<Integer>();
	
	public SolveResult(int contestant){
		this.contestant = contestant;
	}
	
	public void addJudge(Judge judge){
		if(judge.getStatus().equals("C")){
			solvedProblemSet.add(judge.getProblem());
			problemTotal+= 1;
			totalTime += judge.getTime();
		}
		if(judge.getStatus().equals("I")){
			// 문제를 푼 이력이 있으면
			if(solvedProblemSet.contains(judge.getProblem())){
				//벌점 점수 20점 부과
				totalTime += 20;
			}
		}
	}
	
	public String toString(){
		return contestant + " " + problemTotal + " " + totalTime;
	}

	public int getContestant() {
		return contestant;
	}

	public int compareTo(SolveResult o) {
		if(this.problemTotal>o.problemTotal)
			return -1;
		else if(this.problemTotal < o.problemTotal){
			return 1;
		} else if(this.totalTime > o.totalTime){
			return -1;
		} else if(this.totalTime < o.totalTime){
			return 1;
		}
		
		return 0;
	}
}
}}}
 * Solver.java
{{{
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;


public class Solver {
	private Stack<Judge> judges = new Stack<Judge>();
	
	public void inputJudge(int contestant , int problem , int time , String status) {
		judges.push(new Judge(contestant,problem,time,status));
	}
	
	public SolveResult[] doSolve(){
		Map<Integer, SolveResult> resultMap = new HashMap<Integer, SolveResult>();
		
		while(!judges.isEmpty()){
			Judge judge = judges.pop();
			SolveResult solveResult = null;
			if(resultMap.containsKey(judge.getContestant())){
				solveResult = resultMap.get(judge.getContestant());
			}else if(judge.getStatus().equals("C")){ //문제를 풀었을 때만 
				solveResult = new SolveResult(judge.getContestant());
			}
			if(solveResult!=null){
				solveResult.addJudge(judge);
				resultMap.put(solveResult.getContestant(), solveResult);
			}
		}
		
		//맵의 데이터를 정렬 된 리스트에 삽입
		Set<Integer> keys =resultMap.keySet();
		SortedSet<SolveResult> sortedList = new TreeSet<SolveResult>();
		for(Integer key : keys){
			sortedList.add(resultMap.get(key));
		}
		SolveResult[] resultArray = new SolveResult[sortedList.size()];
		return sortedList.toArray(resultArray);
	}
}

}}}
 * SolverTest.java
{{{

import junit.framework.TestCase;


public class SolverTest extends TestCase {
	public void testSolverInput(){
		Solver solver = new Solver();
		solver.inputJudge(1,2,10,"I");
		solver.inputJudge(3,1,11,"C");
		solver.inputJudge(1,2,19,"R");
		solver.inputJudge(1,2,21,"C");
		solver.inputJudge(1,2,25,"C");
		SolveResult [] results = solver.doSolve();
		assertEquals(results.length,2);
		for(SolveResult result : results){
			System.out.println(result);
		}
	}
}

}}}
