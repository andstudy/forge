Minecraft

[https://minecraft.net/ Minecraft]

나는 4년 반 동안 [http://www.king.com/ king.com] 에서 게임 프로그래머로서 근무했고, 개인시간에는 취미로 개인 게임을 개발해왔다. 처음 일을 시작했을 때에는 직원이 8명이었지만 그만둘 당시에는 80 명 이상이었다. 초반에는 취미 개발하는 게 회사랑 아무런 문제가 없었지만, 나중에는 근무기간에 개발한 게임이라던지 상 받은 게 비록 개인시간에 했더라도 모두가 회사 소유라는 얘기를 회사에서 하길래 바로 그만둬 버렸다. 좀더 자유로는 회사에 웹 개발자로 옮긴 이후로 취미 개발에 좀 더 집중할 수 있었다. 처음 Minecraft 는 동적인 큐브기반 월드에서 캐릭터를 이동시키는 탑다운 전략 게임으로서 [http://www.bay12games.com/dwarves/ Dwarf Fortress] 와 [http://en.wikipedia.org/wiki/RollerCoaster_Tycoon RollerCoaster Tycoon] 을 합쳐 놓은 듯한 모양이었다.

1인칭 시점으로 게임을 돌아다녀보니 훨씬 흥미롭다는 것을 알게 되었다. 다만 1인칭 시점이다보니 가까이에서 본 저해상도 텍스처가 너무 흐릿해서 좀더 고해상도 아트를 구해야겠다고 생각하고 있었다. 하지만 [https://en.wikipedia.org/wiki/Infiniminer#Infiniminer Infiniminer] ([http://www.minecraftwiki.net/wiki/Infiniminer 정보2], [http://www.youtube.com/watch?v=eCtmOAoTowk 영상:Let's play Infiniminer!]) 를 본 뒤로 텍스처 안티알리아싱을 빼로 아예 멋진 픽셀 스타일 화면을 보여주는 게 좋겠다는 걸 알게 되었다. 이게 현재 Minecraft 의 출발점이었다. 관련된 내용을 인터넷 포럼에 몇 번 올리고, 무료 알파버전을 몇 주간 올린 뒤에 게임에 요금을 받기로 하고 프리미엄 계정을 추가했다. 프리미엄 계정은 무료버전에 비해서 굉장히 사소한 혜택만 추가되어 있었다. 처음에는 하루에 5개~10개가 팔리더니, 나중에는 15개 이상씩 팔려서 일주일에 3일을 Minecraft 개발에 쏟을 수 있었다.

나중에는 하루에 30개씩, 50개씩 팔려서, king.com 를 그만둔지 딱 1년 만에 Minecraft 만으로 생계를 유지할 수 있게 되었다. 7개월 후에는 베타버전을 출시하고 친구들과 함께 게임 스튜디오를 설립하고 유능한 개발자를 데려와 같이 일할 수 있게 되었다.

Minecraft 는 모든 세상이 다양한 재질의 1미터짜리 블럭으로 만들어진 샌드박스형 판타지 어드벤처 게임이다. 플레이어는 블럭을 집어서 옮기거나 이를 이용해 아이템과 도구를 만들 수 있다. 어두운 곳이나 밤에는 몬스터가 출현한다. 알파버전에서는 여러 기능들을 테스트하는데 집중했고, 베타버전에서는 게임을 정리하고 기존 콘텐트에 살을 붙이고 성능과 안정성 강화에 초점을 맞췄다. 이제 Minecraft 는 매일 6천 카피 이상이 팔려나가고, 여러 곳에서 상도 많이 받았다. 이 포스트모템은 알파버전까지의 Minecraft 초반 개발 이야기를 주로 다루려고 한다.

잘된 점

1. Letting the game fund itself

Minecraft 은 항상 개인자본으로 개발되었다. 처음 버전도 개인시간에 취미로 만들었고 개인서버에 호스팅했다. 서버를 운영할 수 있을 정도로 충분한 돈을 벌게 된 이후로는 진짜 서버를 구축해 거기에 모든 걸 다 옮겨넣었다. Minecraft 만 개발해도 먹고 살 수 있을 때까지는 회사월급으로 생활을 꾸려나갔다. 지금 생각해보면 좀더 빨리 회사를 그만두고 Minecraft 개발만 해도 됐을 거 같지만, 자유 시간은 충분했기 때문에 Minecraft 개발하는데에는 큰 무리가 없었다. 금전적인 위험이 없었기 때문에 Minecraft 와 [http://www.mojang.com/ Mojang] 은 외부 투자자 없이 독립적으로 운영될 수 있었고, 플레이어 외에는 누구에게도 약속 같은 걸 하지 않아도 되었다. 즉, 나는 내가 만들고 싶은 게임 개발에만 집중하고, 같이 일하고 싶은 사람하고만 일할 수 있었다. 게임이 성공한 덕분에 구인하자마자 수많은 이력서를 받을 수 있었고, [http://www.oxeyegames.com/ Oxeye] 와 Junkboy 출신인 [http://en.wikipedia.org/wiki/Jens_Bergensten Jens Bergensten] 같은 멋진 픽셀 아티스트도 데려올 수 있었다. ([http://kotaku.com/5948142/you-wont-believe-how-nice-notchs-office-is Mojang 의 사무실 모습])

2. Open development

시작할 때부터 Minecraft 를 굉장히 공개적으로 개발했다. [http://forums.tigsource.com/index.php?topic=6273.360 TIGSource] 같은 여러 포럼에 Minecraft 개발과정을 얘기하고, 어떤 작업을 하고 있는데, 게임을 어떻게 만들 것인지를 얘기했다. IRC 채널도 만들어 빠르게 의견을 주고 받고, [http://mcupdate.tumblr.com/ Tumblr] 도 만들어 더 많은 사람들로부터 의견을 주고 받았다. 사람들과 의견과 제안을 주고 받으면서 게임이 어떻게 플레이될 수 있는지, 어떤 방향이 더 흥미로울지에 대해서 많이 배울 수 있었다.

나의 플레이 방식과는 다르게 플레이하는 사람들이 많았다. 예를 들어 나는 기본적인 게임 엔진 위에 굉장히 복잡한 게임규칙을 추가하는 중이었는데, 많은 사람들은 엔진 테스트에서 자유롭게 만들 수 있는 모드를 굉장히 좋아한다는 것을 알게 되어 "[http://www.youtube.com/watch?v=LoI4GDuz4y0 creative mode]" 로 만들었다. 때로는 나는 별로라고 생각하는 아이디어를 사람들이 설득하는 경우도 있었다. 그 예가 lighting 과 custom texture pack 이다. texture pack 덕분에 사람들은 클라이언트를 해킹해 텍스쳐를 변경할 수 있었는데, [http://www.youtube.com/watch?v=4PBIqoBP_y4 Portal 모드]를 본 이후로 나도 custom texture pack 가 근사하다고 생각하게 되었다.

다른 사람들이 맞았던 또 다른 예로 사다리가 있다. 개인적으로 게임에서 사다리 나오는 것을 즐기지 않았기 때문에 만들기 싫었지만 거대한 계단을 만들기 위해 엄청난 공간이 필요한 것을 보고 생각을 고쳐먹었다. 다행히 걱정했던 것보다는 사다리가 많이 쓰이지 않았다.

3. Not listening to advice

나에게 조언을 해 주신 많은 분들께 감사하긴 하지만, 대부분의 조언은 그 당시 나로서는 실행 불가능한 것들이었다. 사람들은 자기의 경험에 비추어 조언을 하기 때문에, 이게 나의 현재 상황에 꼭 맞다고 볼 수는 없었다. 내가 만약 조언을 들었더라면 Minecraft 를 개발하겠다고 회사를 그만두지 못했을 것이고, 게임을 만들겠다고 나서지도 못했을 것이다. 조반에 얼리어답터들로부터 펀딩을 받지 않았더라면(프리미엄 계정 얘기하는 건가?) Minecraft 는 절대로 성장할 수 없었을 것이다. 귀기울여 듣지 않았어야 했는데 들어서 아쉬웠던 조언 중 하나는 직장을 좀 더 빨리 그만두지 않았다는 점이다. 덕분에 경제적으로는 좀더 안정적이었지만 결과적으로는 꼭 필요한 것은 아니었다. 또한 '회사 형태를 바꿔라' 같이 도움이 될만한 조언도 무시했었는데 이것은 '아쉬웠던 점'에서 다루기로 하겠다. 나에게도 누군가가 조언을 구하면, 조언을 듣지 말라고 얘기해 주는 편이다. 그러고는 이런 저런 조언을 해 주지만 말이다.

4. Making a game for myself.

나는 언제나 내가 하고 싶은 게임을, 그리고 시장에 없어서 플레이할 수 없어서 불만인 게임을 만들어왔다. 타겟 유저가 자기 자신인 게임을 만들게 되면 사람들이 어떤 것을 원하는지를 쉽게 알 수 있다. 너무나 당연한 것임에도 많은 사람들이 불투명한 "다수의 대중"들이 원하는 게임을 만들려고 노력한다. 만약 내가 만든 게임을 내가 좋아한다면 분명 누군가는 이런 게임을 좋아하는 사람이 있을 것이다. 또한 인터넷은 굉장히 크고 다양한 시장이기 때문에 충분한 잠재 고객이 항상 있다. 다행인 점은 내가 꽤 돈이 될만한 타겟 유저를 대표하는 사람이었다는 점이다.

5. Pure luck

속편을 만드는 게 아니라면, 게임이 얼마나 성공할지 전혀 예측할 수 없다. 나는 왜 Minecraft 가 이렇게 잘 팔리는가에 대해서 여러 번 곰곰히 생각해 보았고 그때마다 조금씩 다른 결론을 내곤 했다. 예를 들면 다른 사람들이 게임하는 걸 보는게 즐겁다보니 입소문이 난 것일수도 있겠고, 랜덤 생성된 레벨은 개인적인 경험이다보니 사람들이 자신의 경험을 더 얘기하고 싶은 것일 수도 있겠다. 하지만 솔직히 얘기하자면 사람들이 인디게임에 지갑을 열기 시작하는 바로 그 타이밍에 맞춰서 딱 적당한 게임을 내 놓았던 것이 가장 큰 이유라고 생각한다. iPhone, XBLA, Steam 같은 플랫폼도 한 몫 했다. 내가 이런 타이밍을 고려했던 것은 아니니 정말 운이 좋았다고 봐야겠다. 물론 나는 게임이 성공한 이유가 게임이 멋지기 때문이라고 스스로에게 얘기하지만 말이다.

아쉬웠던 점

1. The wrong company form

처음에는 혼자 회사를 소유했다. 즉, 내가 곧 회사였다. 이런 회사 형태에서는 회사에 자본을 남길 수 없고, 연말 마다 연봉으로 전부 처리해야 했다. 스웨덴에서 높은 연봉을 받는다는 것은 60% 가 넘는 세금을 내야 한다는 것을 의미한다. 내가 만약 유한책임회사로 시작했었더라면 훨씬 많은 돈을 장래 개발용으로 남겨둘 수 있었을 것이다. 오랫동안 변호사와 얘기하고, 서류 준비하고 은행과 얘기하는 일은 회사 운영으로부터 재미를 뺏아갔다. 다행히 이제는 모든 것이 정상으로 돌아왔고 유능한 CEO 가 회사를 잘 운영하기 때문에 제품개발에 집중할 수 있게 되었다. 

2. Support

많은 이메일은 처리하기가 어렵다. 처음에는 모든 이메일에 답장을 썼다. 다음에는 모두 다 읽되 그 중 꼭 필요한 이메일에만 답장을 썼다. 어느새 하루에만 수백통의 이메일을 받았기 때문에 전부 다 확인할 수가 없었다. 즉, 수많은 지원 이슈가 있음에도 불구하고 내가 이메일 제목만 보고 뽑아서 읽지 않는다면 처리할 수 없었다.
이제 회사가 설립되었기 때문에 이메일을 읽을 수 있는 사람들이 늘었다. 그보다도 이메일을 전혀 쓰지 않는 더 나은 지원 시스템을 구축하려고 한다. 어떻게 구축할지는 아직 결론나지 않았지만 아마도 아웃소싱을 하게 될 거 같다. 아웃소싱 지원은 아무래도 불만족스럽겠지만 적어도 지금처럼 응답도 못 받는 것보다는 나을 것이다.

3. Too much stress

처음 영감을 얻고 프로그래밍에 속도가 붙었을 때에는 굉장히 빠르게 작업할 수 있었다. 그래서 때때로는 너무 목표를 빡빡하게 잡기도 했고, 병이라도 나거나 어려운 버그 때문에 개발 속도가 지연되기라도 하면 스트레스를 너무 많이 받았다. 그 중에서도 이메일을 다 확인하지 못하다보니 중요한 정보를 놓치고 있다는 점에서 지속적으로 스트레스를 받았다.
풀타임으로 Minecraft 를 개발하기 전에 가장 크게 망가졌을 때에는 무려 3주간 휴가를 쓰고 게임하고 자는 것 외에는 아무것도 하지 않고 있어야 했다. 최근에는 베타버전을 출시하면서 나를 포함한 회사 인원의 절반이 병이 났다. 매일 12시간을 진통제와 커피를 마셔가면서 일하다보니 진이 다 빠져버렸다. 이제는 좀더 제대로 된 개발방법론을 도입하려고 노력 중이다.

4. Code Reboot

오랫동안 같은 코드베이스에서 작업했더니 코드가 성에 안 차서 처음부터 엔진을 새로 짜기로 결정했다. 아마 대부분의 프로그래머들이 이런 결정을 하지 않을까 싶다. 예전에 작성한 구조로는 새로 만들어야 하는 기능을 제대로 구현하지 못할 거 같아서 아예 처음부터 새로 짜기로 하는 것이다. 하지만 절대로 좋은 생각이 아니다. 중복 작업에 시간을 낭비할 뿐만 아니라 구현하다가 까먹는다던지 해서 몇몇 기능을 빼먹기 마련이다. 물론 새로운 엔진에는 라이팅 엔진이나 맵 크기를 무한대로 만들 수 있는 새로운 기능도 추가되긴 했지만, 예전 엔진이라고 이런 기능을 못 넣을 것은 아니었다. 구조를 좀 바꾸긴 해야 했겠지만 새로 만드는 것보다는 훨씬 금방 만들 수 있었을 것이고 멀티플레이 같은 중요한 기능도 계속 유지할 수 있었을 것이다. 다시 짜고 싶다는 생각이 들더라도 꾹 참자!

5. Waiting too long to add multiplayer

코드 재작성 때문에 예전 코드로 만든 게임은 "클래식"으로, 새로운 코드로 만든 게임은 "알파"로 분리했다. 알파버전에는 멀티플레이 기능을 포팅하지 않았고, 대신 싱글 플레이 버전에 집중해 새로운 기능을 마구 추가했다. 아마 이때가 내가 가장 창의력이 샘솟던 시기였을 것이다. 하지만 멀티플레이 기능을 추가할 때가 되고 나니 할 일이 너무 많았다.
너무 많은 기능이 배포를 고려하지 않고 만든 바람에 게임로직 코드가 렌더링 코드와 섞여있었고, 몬스터 타겟팅은 한 명만 한다는 식으로 여러 가정이 멀티플레이를 고려하지 않고 있었다. 할 일이 너무 많다보니 의욕이 떨어져 개발 속도도 느려졌다.
특히 나쁜 예가 인벤토리다. 처음 구현할 때는 그냥 UI 를 적당히 조작해서 만들었지만 이걸 서버사이드로 옮기려고 보니 로직과 렌더링 코드를 분리할 일이 너무 많았다. 이러고 나서는 클라이언트에서 치팅으로 만들지도 않은 아이템을 쓰는 걸 막는 노력은 해 보지도 못했다. 결국 대부분의 코드를 새로 짜야했고 서버사이드 인벤토리를 수정하는 것만으로도 몇 주가 걸렸다. 이제는 뭔가 새로운 기능을 추가할 때는 싱글, 멀티 플레이 모두 테스트하려고 하고, 더 나아가서 게임 구조를 바꿔서 싱글 플레이를 할 때에도 사실 멀티 플레이 버전이 로컬서버에 붙는 형식으로 변경하려고 한다

Jeppers creepers

Minecraft 개발은 혼란스럽고 자연스러웠다. 내가 뭔가 빠졌다고 생각하면 기능을 추가했고, 버그도 귀찮다고 느껴질 때에 고쳤다. 예를 들어 돼지가 길쭉하고 짧은 다리를 가진 형태로 보여지는 버그가 있었을 때 나는 그걸 그대로 두고 게임의 일부로 만들었다. 이 녀석들은 굉장히 으시시하게 이동했기 때문에 아예 "[http://www.minecraftwiki.net/wiki/Creeper Creepers]"라고 이름짓고 녹색으로 칠해버렸다. 이제 Creepers 가 게임의 아이콘 같은 역할을 하는 걸 보면 꽤 괜찮은 결정이었다.
Minecraft 를 시작할 당시에는 반년에서 일년 정도면 프로젝트를 끝내고 다음 프로젝트를 시작할 수 있을 정도로만 돈을 벌 수 있기를 바랬다. 이제 1년하도고 반년이 지났는데 겨우 알파까지 왔다. 이제 완성버전을 만들 시간이고, 이를 위해서는 우선 완성버전은 어떤 것인가에 대한 정의가 필요하다.
이렇게 계속 업데이트를 잘 하고 있는데 왜 완성버전이라는게 필요하다는 생각을 하게 되었는지 잘 모르겠다. 하지만 뭔가 달성할 목표가 없다는 것도 좋아보이지 않는다.
요즘은 게임에 소셜미디어를 도입하려고 한다. 예를 들어 게임화면을 녹화해 바로 동영상 사이트에 올린다거나, Facebook 과 연동하는 식으로 말이다. 하지만 게임이 재미가 없다면 아무리 소셜미디어 연동을 잘 만들어도 시간 낭비일것이다.
회사는 급속도로 성장해 지금은 7명이 근무하고 있고 조만간 15명이 근무하게 될 것이다. 지금은 새로운 게임을 프로토타이핑하는 중이고 좀더 많은 게임 아이디어를 시도해 볼 것이다.

참고
[http://gamasutra.com/view/news/32809/Exclusive_Behind_The_Scenes_Of_Minecraft.php#.UGheL00xowo gamasutra : Exclusive: Behind The Scenes Of Minecraft]

----
[GameDeveloperMagazine]
