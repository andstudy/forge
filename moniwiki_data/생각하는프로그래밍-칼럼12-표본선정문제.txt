= 표본 선정 문제 =
== 문제 ==
입력은 두 개의 정수 m 과 n 으로 이루어진다. 출력은 범위 0..n-1 에서 랜덤하게 선택된 정수 m 개를 정렬한 리스트이고, 같은 정수가 반복되는 일은 없다. 
== Solution 1 ==
{{{
void genknuth(int m, int n) {
	// select m of remaining n - i
	for (int i = 0; i < n; ++i) {
		if ((rand() % (n - i)) < m) {
			cout << i << "\n";
			--m;
		}
	}
}
}}}

== 디자인 공간 ==
"디자인 공간"은 무엇을 뜻하는 걸까?
 * 여러가지 솔루션, 디자인 패턴, 알고리즘 같은 문제 해결 방식의 Pool 을 얘기하는 듯?
  
Solution 1 의 장/단점
 * 장점 : 단순, 짧은 코드, 적은 필요 메모리
 * 단점 : 실행시간이 O(n)

=== Soultion 2 ===
{{{
void getsets(int m, int n) {
	set<int> S;
	while (S.size() < m) {
		S.insert(rand() % n);
	}
	for (set<int>::iterator i = S.begin(); i != S.end(); ++i) {
		cout << *i << "\n";
	}
}
}}}

Soultion 2 의 장/단점
 * 장점 : O(m log m) 의 동작 시간
 * 단점 : 많은 메모리 소모
 
=== Solution 3 ===
{{{
#include <algorithm>
int randint(int l, int u) {
	return l + rand() % (u - l + 1);
}

void genshuf(int m, int n) {
	int *x = new int[n];
	for (int  i = 0; i < n; ++i) {
		x[i] = i;
	}
	for (int i = 0; i < m; ++i) {
		swap(x[i], x[randint(i, n - 1)]);
	}
	sort(x, x + m);
	for (int i = 0; i < m; ++i) {
		cout << x[i] << "\n";
	}
	delete x;
}
}}}

Solution 3 의 장/단점
 * 중복될 염려가 없다.
 * 단점 : int n 개의 메모리 사용, O(n + mlog m)
  * 연습문제 1.9 기법 사용하면 O(m log m) 으로 줄일 수 있다.
 * 시간과 메모리가 많이 사용된다고 하지만, 만약 여러 번 호출된다면 어떨까?
  * static 혹은 member 변수로 기억해 놓는 예제

== 원리 ==
 * 발견된 문제를 이해하라.
 * 추상적인 문제를 구체화하라
  * [http://goodhyun.com/archives/2007/06/651.php 프로젝트 관리 - 낭만IT]
   * 보는 김에 이것도 보자.
   * [http://goodhyun.com/archives/2007/05/645.php 아키텍트]
   * [http://goodhyun.com/archives/2007/05/646.php 아키텍트 2]
   * [http://goodhyun.com/archives/2007/05/648.php 아키텍트 3]
 * 디자인 공간을 탐구하라.
 * 한 솔루션을 구현하라?
  * 한? 한 개? 여러 개 하라는 거 아니었어?
  * 한 개가 아니라, 그냥 프로토타입을 구현해 보라는 뜻 같다.
 * 되돌아 보라.
  * Refactoring 을 먼저 하자.
  * 더러운 유리창을 닦아서 창 너머를 보기
  
== 응용 ==
게임에서의 [http://www.auto1009.co.kr/?gclid=CPC72ebVzYwCFQ-WbgodcCF2tw AutoPlayer] 을 없앨 수 있는 방법이 있을까요?
지금까지 나온 방법들
 * GM 에게 신고를 할 수 있게 한다.
 * 게임 필드에 가끔 출현하는 엄청 쎈 몹을 배치한다. 그라나도 에스파다
 * 카발 온라인, 라펠즈 에서의 오토 트랩 사용
  * [http://cabal.g-report.com/bbs/board.php?bo_table=cabal_report&wr_id=536&page=4 카발 온라인 : 오토트랩]
  * [http://www.gameabout.com/guide/view.ga?news_id=8723 라펠즈의 오토 트랩]
  * [http://www.cabal.co.kr/Default.aspx?wbs=5.5.2&FindType=&FindString=&Page=29&Article=10485&CPage=2 이것도 쉽진 않군요] 
  
== 연습 문제들 ==
 1. rand() 가 15 bit 밖에 안 된다는 거 알고 계셨나요?
  {{{ int bigrand() { return RAND_MAX * rand() + rand();} }}}
 4. 문제보다~ 
  * [http://mathworld.wolfram.com/CouponCollectorsProblem.html 쿠폰 수집가 문제(Coupon Collector's Problem)]
   * n 가지 종류의 야구 카드를 모두 가지고 있으려면, 얼마나 많은 야구 카드를 수집해야 할까? 답 : n ln n
   * [http://www.math.uci.edu/~htucker/coupon.cpp 여긴 소스코드]
  * [http://en.wikipedia.org/wiki/Birthday_paradox 생일 패러독스(Birthday Paradox)]
   * 23 명 이상의 사람들로 구성된 모임에서, 생일이 같은 두 명이 있을 가능성이 크다.
   * [http://mathworld.wolfram.com/BirthdayProblem.html 이거일까?]
 7. 재미있는 재귀 호출
 10.  n 개의 갯수를 미리 알 수 없는 아이템을 같은 확률로 선택하는 방법
{{{
int bigrand() { 
	return RAND_MAX * rand() + rand();
}
int randint(int l, int u) {
	//return l + rand() % (u - l + 1);		// rand를 쓰면 안 됩니다. 왜?
	return l + bigrand() % (u - l + 1);
}
bool IsInProb(double prob) {
	const int upper = 100000000;
	double randValue = (double)randint(0, upper);
	const double p = randValue / (double)upper;
	return p < prob;
}
int _tmain(int argc, _TCHAR* argv[]) {
	srand(unsigned int(time(NULL)));

	typedef vector<int> IntList;
	IntList ints;
	for (int i = 0; i < 100; ++i) {
		ints.push_back(randint(0, 100000));
	}

	// 가정 1. 사용자는 ints 에 얼마만큼의 숫자가 있는지 모릅니다.
	// 가정 2. 모든 아이템에 대해서 똑같은 확률로 선택하고 싶어합니다.
	int selected = 0;
	double prob = 1.0;
	double selectedProb = 0.0;
	for (IntList::iterator it = ints.begin(); it != ints.end(); ++it) {
		if (IsInProb(1.0 / prob)) {
			selected = *it;
			selectedProb = prob;
		}
		prob += 1.0;
	}

	cout << selected << "\nselectedProb = " << selectedProb << "\n";
	system("pause");
	return 0;
}
}}}
 11. 미리 계산 가능한 건 최대한 미리 해 둔다.
{{{
#include <iostream>
#include <iomanip>
#include <valarray>
const double pi = 3.14159265359;
static valarray<double> va1 ( 9 );
static valarray<double> va2 ( 9 );

namespace {
class ArrayInitializer {
public:
	ArrayInitializer() {
		for ( int i = 0 ; i < 9 ; i++ ) {
			va1 [ i ] =  pi * ( 0.25 * i - 1 );
		}
		va2 = sin ( va1 );
	}
};

static ArrayInitializer s_Initializer;
};

int _tmain(int argc, _TCHAR* argv[]) {
	cout << "The initial valarray is:\n";
	for ( int i = 0 ; i < 9 ; i++ ) {
		cout	<< setw(10) << va1 [ i ] << " radians, which is " << setw(5) << ( 180/pi ) * va1 [ i ]
				<< "   degrees" << endl;
	}
	cout << "\nThe sine of the initial valarray is:\n";
	for ( int i = 0 ; i < 9 ; i++ ) {
		cout << va2 [ i ] << endl;
	}
	system("pause");
	return 0;
}
}}}

== rand ==
난수 발생기의 충족 조건
 * 공평하게 분산된 난수
 * 값을 예측하기 어려움
 * 길고 완전한 사이클을 가져야 한다.
rand 대신에 CryptGenRandom 함수를 사용하라는 권고가 있습니다.
{{{
#ifndef _MT
static long microsoft_holdrand = 1L;
#endif

void microsoft_srand (unsigned int seed) {
#ifdef _MT
        _getptd()->_holdrand = (unsigned long)seed;
#else  /* _MT */
        microsoft_holdrand = (long)seed;
#endif  /* _MT */
}

int microsoft_rand (void) {
#ifdef _MT
        _ptiddata ptd = _getptd();
        return( ((ptd->_holdrand = ptd->_holdrand * 214013L + 2531011L) >> 16) & 0x7fff );
#else  /* _MT */
        return(((microsoft_holdrand = microsoft_holdrand * 214013L + 2531011L) >> 16) & 0x7fff);
#endif  /* _MT */
}
}}}
[http://www.google.com/codesearch?hl=ko&q=+_holdrand+_getptd+show:AOGRTtPcoVk:T-2AgR92ROc:HWPEaFRxcM0&sa=N&cd=1&ct=rc&cs_p=http://mirrors.evolva.ro/kdeftp/Attic/2.2.2/src/kdegames-2.2.2.tar.bz2&cs_f=kdegames-2.2.2/kpat/freecell-solver/test_multi.c#a0 출처]
