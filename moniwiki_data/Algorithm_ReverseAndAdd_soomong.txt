 * 입력은 생략하였습니다. accept 받는것도 계속 생략하게 되네요 ^^;;

{{{

public class ReverseAdd {

	
	public boolean isPalindrome(char[] num) {
	
		for(int i=0, j= num.length-1 ; i< num.length && i<=j ; i++, j--)		{

			if( num[i] != num[j] )
				return false;
		}
				
		return true;	
	}

	public char[] reverse(char[] num) {
		
		char[] temp = new char[num.length];
		
		for(int i=0, j=num.length-1; i< num.length ; i++,j--) {
			temp[j] = num[i];
		}
		
		return temp;
	}

	public char[] add(char[] fir, char[] sec) {
		
		int result = Integer.parseInt(String.valueOf(fir)) + Integer.parseInt(String.valueOf(sec));
		
		return String.valueOf(result).toCharArray();
	}



	public int calReverseCount(char[] num) {
	
		int count =0;
		
		while(isPalindrome(num) == false && count < 1000 ) {
		
			num = add(num,reverse(num));
			count++;
			
		}
		
		System.out.println(count+" "+ String.valueOf(num));
		
		return count;
	}


}
}}}

{{{
import java.util.Arrays;

import junit.framework.TestCase;


public class ReverseAddTest extends TestCase {

	ReverseAdd ra = new ReverseAdd();
	
	public void testIsPalindrome() {
	
		assertTrue(ra.isPalindrome(new char[] {'9','3','3','9'}));
		assertFalse(ra.isPalindrome(new char[] {'9','2','3','3','9'}));
		assertTrue(ra.isPalindrome(new char[] {'4','5','2','5','4'}));
		assertTrue(ra.isPalindrome(new char[] {'6','6','6','6'}));
		assertTrue(ra.isPalindrome(new char[] {'1'}));
		assertFalse(ra.isPalindrome(new char[] {'1','2'}));
	}
	
	public void testReverse() {
		
		assertTrue(Arrays.equals(ra.reverse(new char[] {'1','9','5'}),new char[] {'5','9','1'}));
		assertTrue(Arrays.equals(ra.reverse(new char[] {'7','8','6'}),new char[] {'6','8','7'}));
		assertTrue(Arrays.equals(ra.reverse(new char[] {'1','4','7','3'}),new char[] {'3','7','4','1'}));
		assertTrue(Arrays.equals(ra.reverse(new char[] {'5','2','1','4'}),new char[] {'4','1','2','5'}));
		assertFalse(Arrays.equals(ra.reverse(new char[] {'5','2','1','4'}),new char[] {'4','1','3','5'}));
		assertTrue(Arrays.equals(ra.reverse(new char[] {'1'}),new char[] {'1'}));
	}
	
	public void testAdd() {
		assertTrue(Arrays.equals(ra.add(new char[] {'1','9','5'},new char[] {'5','9','1'}),new char[] {'7','8','6'}));
		assertTrue(Arrays.equals(ra.add(new char[] {'7','8','6'},new char[] {'6','8','7'}),new char[] {'1','4','7','3'}));
		assertTrue(Arrays.equals(ra.add(new char[] {'1','9'},new char[] {'5','9'}),new char[] {'7','8'}));
		assertFalse(Arrays.equals(ra.add(new char[] {'1','0'},new char[] {'5','0'}),new char[] {'6','8'}));
	}
	
	public void testCalReverseCount() {
		assertEquals(4,ra.calReverseCount(new char[] {'1','9','5'}));
		assertEquals(5,ra.calReverseCount(new char[] {'2','6','5'}));
		assertEquals(3,ra.calReverseCount(new char[] {'7','5','0'}));
		assertEquals(0,ra.calReverseCount(new char[] {'1','1','1'}));
		assertEquals(0,ra.calReverseCount(new char[] {'1','1','1'}));
	}
	
}
}}}
